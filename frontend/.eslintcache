[{"/Users/alapan/Documents/ssad/jap/frontend/src/components/Login.jsx":"1","/Users/alapan/Documents/ssad/jap/frontend/src/index.js":"2","/Users/alapan/Documents/ssad/jap/frontend/src/components/CreateJob.jsx":"3","/Users/alapan/Documents/ssad/jap/frontend/src/components/Signup.jsx":"4","/Users/alapan/Documents/ssad/jap/frontend/src/components/DashboardUser.jsx":"5","/Users/alapan/Documents/ssad/jap/frontend/src/App.js":"6","/Users/alapan/Documents/ssad/jap/frontend/src/components/ViewApplications.jsx":"7","/Users/alapan/Documents/ssad/jap/frontend/src/reportWebVitals.js":"8","/Users/alapan/Documents/ssad/jap/frontend/src/components/UpdateUser.jsx":"9","/Users/alapan/Documents/ssad/jap/frontend/src/components/Main.jsx":"10","/Users/alapan/Documents/ssad/jap/frontend/src/components/UpdateRecruiter.jsx":"11","/Users/alapan/Documents/ssad/jap/frontend/src/components/DashboardRecruiter.jsx":"12","/Users/alapan/Documents/ssad/jap/frontend/src/components/SelectedJobApps.jsx":"13","/Users/alapan/Documents/ssad/jap/frontend/src/components/SelectedApplicants.jsx":"14","/Users/alapan/Documents/ssad/jap/frontend/src/components/Logout.jsx":"15","/Users/alapan/Documents/ssad/jap/frontend/src/components/HeaderUser.jsx":"16","/Users/alapan/Documents/ssad/jap/frontend/src/components/HeaderRecruiter.jsx":"17"},{"size":5170,"mtime":1611338845425,"results":"18","hashOfConfig":"19"},{"size":547,"mtime":1610768308116,"results":"20","hashOfConfig":"19"},{"size":10344,"mtime":1611344795522,"results":"21","hashOfConfig":"19"},{"size":22478,"mtime":1611284695959,"results":"22","hashOfConfig":"19"},{"size":11270,"mtime":1611346923589,"results":"23","hashOfConfig":"19"},{"size":297,"mtime":1610731233322,"results":"24","hashOfConfig":"19"},{"size":5648,"mtime":1611344286084,"results":"25","hashOfConfig":"19"},{"size":362,"mtime":1610721768994,"results":"26","hashOfConfig":"19"},{"size":17238,"mtime":1611344220787,"results":"27","hashOfConfig":"19"},{"size":5430,"mtime":1611344678493,"results":"28","hashOfConfig":"19"},{"size":10465,"mtime":1611344746931,"results":"29","hashOfConfig":"19"},{"size":7124,"mtime":1611344579412,"results":"30","hashOfConfig":"19"},{"size":5751,"mtime":1611344456808,"results":"31","hashOfConfig":"19"},{"size":8291,"mtime":1611344344241,"results":"32","hashOfConfig":"19"},{"size":898,"mtime":1611343357080,"results":"33","hashOfConfig":"19"},{"size":2471,"mtime":1611341705663,"results":"34","hashOfConfig":"19"},{"size":2726,"mtime":1611344880071,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1jb9lyc",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/alapan/Documents/ssad/jap/frontend/src/components/Login.jsx",["81","82","83","84","85","86","87","88","89"],"/Users/alapan/Documents/ssad/jap/frontend/src/index.js",[],["90","91"],"/Users/alapan/Documents/ssad/jap/frontend/src/components/CreateJob.jsx",["92","93","94","95","96","97","98","99","100","101"],"import React , {Component}from 'react';\nimport {Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback} from 'reactstrap';\nimport { render } from '@testing-library/react';\n\nimport { BrowserRouter as Router, Route, Link , Switch, Redirect} from \"react-router-dom\";\nimport axios from 'axios';\n\nimport HeaderRecruiter from './HeaderRecruiter'\n\nclass CreateJob extends Component{\n    constructor(props){\n        super(props);\n\t\tthis.state = {\n\t\t\ttitle: '',\n            type: '',\n            deadline:'',\n            skill:[''],\n            type:'',\n            salary:'',\n            maxAppli:'',\n            maxPos:'',\n            remAppli:'',\n            remPos:'',\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.removeSkill = this.removeSkill.bind(this);\n        this.addSkill = this.addSkill.bind(this);\n        this.renderSkill = this.renderSkill.bind(this);\n    }\n\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        // console.log(name , value);\n        let tok = name.split('-');\n        if(tok[0]==='skill'){\n            let sk = this.state.skill;\n            let pos = Number(tok[1]);\n            sk[pos] = value;\n            this.setState({skill:sk});\n        }\n        else{\n            this.setState({\n            [name]: value\n            });\n        }\n    }\n\n    addSkill(){\n        let sk = this.state.skill;\n        sk.push('');\n        this.setState({skill : sk});\n    }\n\n    removeSkill(idx){\n        let sk = this.state.skill;\n        sk.splice(idx,1);\n        this.setState({skill : sk});\n    }\n\n    renderSkill(){\n        let sk = this.state.skill;\n        let sks = sk.map((val,idx)=>{\n            let skIdx = `skill-${idx}`;\n            return(\n                <FormGroup row>\n                <Label htmlFor=\"type\" md={2}></Label>\n                <Col md={3}>\n                    <Input type=\"select\" name={skIdx} value={this.state.skill[idx]} onChange={this.handleInputChange}>\n                        <option value=''> Select Type</option>\n                        <option>C++</option>\n                        <option>Python</option>\n                    </Input>\n                </Col>\n                <Col md={1}>\n                <Button\n                onClick={()=>{this.removeSkill(idx)}}>\n                    -\n                </Button>\n                </Col>\n                </FormGroup>\n            )\n        });\n        return(\n            <div>\n                <FormGroup row>\n                <Label md={2}>Skills</Label>\n                </FormGroup>\n                {sks}\n                <FormGroup row>\n                <Label md={2}></Label>\n                <Col md={10}>\n                <Button color=\"primary\"\n                onClick={this.addSkill}>\n                    +\n                </Button>\n                </Col>\n                </FormGroup>\n            </div>\n\n        );\n    }\n\n\n    handleSubmit(event) {\n        // console.log('Current State is: ' + JSON.stringify(this.state));\n        alert('Current State is: ' + JSON.stringify(this.state));\n        event.preventDefault();\n        axios({\n            method: \"POST\",\n            url: \"http://localhost:3000/jobs\",\n            data: this.state,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            alert(JSON.stringify(response));\n            console.log( response);\n        }).catch(error => {\n            alert(JSON.stringify(error.response));\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n    render(){\n\n        let skills = this.renderSkill();\n\n        return (\n            <div className=\"container\">\n                <HeaderRecruiter/>\n                <div className=\"row row-content\">\n                    <div className=\"col-12 col-md-9\">\n                        <Form onSubmit={this.handleSubmit}>\n                            <FormGroup row>\n                                <Label htmlFor=\"title\" md={2}>Title of Job</Label>\n                                <Col md={10}>\n                                    <Input type=\"text\" id=\"title\" name=\"title\"\n                                        placeholder=\"Name of the Job Profile\"\n                                        value={this.state.title}\n                                        onChange={this.handleInputChange} />\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"type\" md={2}>Type</Label>\n                                <Col md={10}>\n                                <Input type=\"select\" id=\"type\" name=\"type\"\n                                    placeholder=\"Type of your Job\"\n                                    value={this.state.type}\n                                    onChange={this.handleInputChange} >\n                                        <option value=''>Select Type</option>\n                                        <option>Full Time</option>\n                                        <option>Part Time</option>\n                                        <option>Work From Home</option>\n                                </Input>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"salary\" md={2}>Salary</Label>\n                                <Col md={10}>\n                                <Input type=\"Number\" id=\"salary\" name=\"salary\"\n                                    placeholder=\"Salary\"\n                                    value={this.state.salary}\n                                    // valid={errors.password === ''}\n                                    // invalid={errors.password !== ''}\n                                    // onBlur={()=>{this.handleBlur('password')}}\n                                    onChange={this.handleInputChange} />\n                                {/* <FormFeedback>{errors.password}</FormFeedback> */}\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"maxPos\" md={2}>Maximum Positions</Label>\n                                <Col md={10}>\n                                <Input type=\"Number\" id=\"maxPos\" name=\"maxPos\"\n                                    placeholder=\"Maximum Number of Positions to be filled\"\n                                    value={this.state.maxPos}\n                                    // valid={errors.password === ''}\n                                    // invalid={errors.password !== ''}\n                                    // onBlur={()=>{this.handleBlur('password')}}\n                                    onChange={this.handleInputChange} />\n                                {/* <FormFeedback>{errors.password}</FormFeedback> */}\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"maxAppli\" md={2}>Maximum Applications</Label>\n                                <Col md={10}>\n                                <Input type=\"Number\" id=\"maxAppli\" name=\"maxAppli\"\n                                    placeholder=\"Maximum Number of Applications\"\n                                    value={this.state.maxAppli}\n                                    // valid={errors.password === ''}\n                                    // invalid={errors.password !== ''}\n                                    // onBlur={()=>{this.handleBlur('password')}}\n                                    onChange={this.handleInputChange} />\n                                {/* <FormFeedback>{errors.password}</FormFeedback> */}\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"duration\" md={2}>Duration</Label>\n                                <Col md={10}>\n                                <Input type=\"Number\" id=\"duration\" name=\"duration\"\n                                    placeholder=\"Duration in Months\"\n                                    value={this.state.duration}\n                                    // valid={errors.password === ''}\n                                    // invalid={errors.password !== ''}\n                                    // onBlur={()=>{this.handleBlur('password')}}\n                                    onChange={this.handleInputChange} />\n                                {/* <FormFeedback>{errors.password}</FormFeedback> */}\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"deadline\" md={2}>Deadline</Label>\n                                <Col md={10}>\n                                <Input type=\"datetime-local\" id=\"deadline\" name=\"deadline\"\n                                    placeholder=\"Deadline to Fill\"\n                                    value={this.state.deadline}\n                                    // valid={errors.password === ''}\n                                    // invalid={errors.password !== ''}\n                                    // onBlur={()=>{this.handleBlur('password')}}\n                                    onChange={this.handleInputChange} />\n                                {/* <FormFeedback>{errors.password}</FormFeedback> */}\n                                </Col>\n                            </FormGroup>\n                            {skills}\n                            <FormGroup row>\n                                <Col md={{size: 3, offset: 3}}>\n                                    <Button color=\"primary\" type=\"submit\">\n                                        Create Job\n                                    </Button>\n                                </Col>\n                            </FormGroup>\n                        </Form>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default CreateJob;","/Users/alapan/Documents/ssad/jap/frontend/src/components/Signup.jsx",["102","103","104","105","106","107"],"import React , {Component}from 'react';\nimport {Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback} from 'reactstrap';\nimport {Link} from 'react-router-dom';\nimport { render } from '@testing-library/react';\nimport axios from 'axios';\n\nclass Signup extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            formtype: '',\n            firstName:'',\n            lastName:'',\n            email: '',\n            password: '',\n            education:[{institute:'', start:'',end:''}],\n            skill:[''],\n            telnum:'',\n            bio:'',\n            touched : {\n                firstName:false,\n                lastName:false,\n                email: false,\n                password: false,\n                telnum: false,\n                bio: false,\n                formtype:false,\n                education:[{institute:false, start:false,end:false}],\n                skill:[false],\n            }\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleUserChange = this.handleUserChange.bind(this);\n        this.renderEducation = this.renderEducation.bind(this);\n        this.addEducation = this.addEducation.bind(this);\n        this.removeEducation = this.removeEducation.bind(this);\n        this.renderSkill = this.renderSkill.bind(this);\n        this.addSkill = this.addSkill.bind(this);\n        this.removeSkill= this.removeSkill.bind(this);\n        this.validateRecruiter= this.validateRecruiter.bind(this);\n        this.validateEducation= this.validateEducation.bind(this);\n        this.validateSkill= this.validateSkill.bind(this);\n        this.handleBlurSkill = this.handleBlurSkill.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        // console.log(name , value);\n\n        let tok = name.split('-');\n        if(tok[0]==='education'){\n            let ed = this.state.education;\n            let pos = Number(tok[1]);\n            let field = tok[2];\n            ed[pos][field] = value;\n            this.setState({education:ed});\n        }\n        else if(tok[0]==='skill'){\n            let sk = this.state.skill;\n            let pos = Number(tok[1]);\n            sk[pos] = value;\n            this.setState({skill:sk});\n        }\n        else{\n            this.setState({\n            [name]: value\n            });\n        }\n    }\n\n    validateSubmit(firstName,lastName,email,password,formtype,bio,telnum,skill, education){\n        if((firstName.length === 0)){\n            alert('First Name is required');\n            return false;\n        }\n        if((lastName.length===0)){\n            alert('Last Name is required');\n            return false;\n        }\n        const reg = /^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+.+(?:.[a-zA-Z0-9-]))$/;\n        if(!reg.test(email)){\n            alert('Invalid Email');\n            return false;\n        }\n        if((password.length===0)){\n            alert('Password is required');\n            return false;\n        }\n        if((formtype==='')){\n            alert('Select A User Type');\n            return false;\n        }\n\n        const phonereg = /^\\d{10}$/;\n        if(this.state.formtype==='recruiter' && this.state.touched.telnum && !phonereg.test(telnum)){\n            alert('Invalid Phone Number');\n            return false;\n        }\n        let allWords = bio.split(' ');\n        if(this.state.formtype==='recruiter' && (allWords.length > 250)){\n            alert('Max Limit 250 words');\n            return false;\n        }\n\n        var i, n = skill.length;\n        for(i=0;i<n;i++){\n            if(this.state.formtype==='user' && (this.state['skill'][i] === '')){\n                alert(\"Skill is compulsory. Please remove the skill if not required\")\n                return false;\n            }\n        }\n\n        var i,n = education.length;\n        for(i=0;i<n;i++){\n            if(this.state.formtype==='user' && this.state.education[i].institute.length === 0){\n                    alert('Institute Name is required, remove if not to be added');\n                    return false;\n            }\n            if(this.state.formtype==='user' && (this.state.education[i].start === '' || Number(this.state.education.start)<=0)){\n                alert('Start Year is required');\n                return false;\n            }\n        }\n\n        return true;\n\n    }\n\n    validate(firstName,lastName,email,password,formtype) {\n        const errors={\n            firstName:'',\n            lastName:'',\n            email: '',\n            password: '',\n            formtype:''\n        };\n        if(this.state.touched.firstName && (firstName.length === 0)){\n            errors.firstName='First Name is required';\n        }\n        if(this.state.touched.lastName && (lastName.length===0)){\n            errors.lastName='Last Name is required';\n        }\n        const reg = /^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+.+(?:.[a-zA-Z0-9-]))$/;\n        if(this.state.touched.email && !reg.test(email)){\n            errors.email='Invalid Email';\n        }\n        if(this.state.touched.password && (password.length===0)){\n            errors.password='Password is required';\n        }\n        if(this.state.touched.formtype && (formtype==='')){\n            errors.formtype = 'Select A User Type';\n        }\n\n        return errors;\n    }\n\n    validateRecruiter(telnum,bio){\n        const errors={\n            bio:'',\n            telnum:'',\n        };\n\n        if(this.state.formtype==='user') return errors;\n\n        const phonereg = /^\\d{10}$/;\n        if(this.state.touched.telnum && !phonereg.test(telnum)){\n            errors.telnum='Invalid Phone Number';\n        }\n        let allWords = bio.split(' ');\n        if(this.state.touched.bio && (allWords.length > 250)){\n            errors.bio='Max Limit 250 words';\n        }\n        return errors;\n    }\n    validateEducation(education){\n        let errors={};\n        errors.education = [];\n        var i,n = education.length;\n        for(i=0;i<n;i++){\n            errors.education.push({institute:'', start: '', end:''});\n            if(this.state.touched.education[i].institute && this.state.education[i].institute.length === 0){\n                    errors.education[i].institute = 'Institute Name is required, remove if not to be added';\n            }\n            if(this.state.touched.education[i].start && (this.state.education[i].start === '' || Number(this.state.education.start)<=0)){\n                errors.education[i].start = 'Start Year is required';\n            }\n        }\n        return errors;\n    }\n\n    validateSkill(skill){\n        let errors ={}\n        errors.skill=[];\n        var i, n = skill.length;\n        for(i=0;i<n;i++){\n            errors.skill.push('');\n            if(this.state.touched['skill'][i] && (this.state['skill'][i] === '')){\n                errors['skill'][i] = \"Skill is compulsory. Please remove the skill if not required\"\n            }\n        }\n        return errors;\n    }\n\n\n\n    addEducation(){\n        let ed = this.state.education;\n        ed.push({institute:'', start:'',end:''});\n        let touched = this.state.touched;\n        touched.education.push({institute:false,start:false,end:false});\n        this.setState({education : ed, touched: touched});\n    }\n\n    removeEducation(idx){\n        console.log(idx);\n        let ed = this.state.education;\n        ed.splice(idx,1);\n        let touched = this.state.touched;\n        touched.education.splice(idx,1);\n        this.setState({education : ed, touched: touched});\n    }\n\n    renderEducation(){\n        let ed = this.state.education;\n\n        let errors = this.validateEducation(ed);\n\n        let eds = ed.map((val,idx)=>{\n            let edIdx = `education-${idx}`;\n            return(\n                <FormGroup row>\n                <Label md={2}></Label>\n                <Col md={6}>\n                    <Input type=\"text\" name={edIdx+'-institute'}\n                        placeholder=\"Institute Name\"\n                        value={this.state.education[idx].institute}\n                        onChange={this.handleInputChange}\n                        valid={errors.education[idx].institute === ''}\n                        invalid={errors.education[idx].institute !== ''}\n                        onBlur={()=>{this.handleBlurEd('institute', idx)}}\n                        />\n                        <FormFeedback>{errors.education[idx].institute}</FormFeedback>\n                    <Input type=\"number\" name={edIdx+'-start'}\n                        placeholder=\"Start Year\"\n                        value={this.state.education[idx].start}\n                        onChange={this.handleInputChange}\n                        valid={errors.education[idx].start === ''}\n                        invalid={errors.education[idx].start !== ''}\n                        onBlur={()=>{this.handleBlurEd('start',idx)}}\n                        />\n                        <FormFeedback>{errors.education[idx].start}</FormFeedback>\n\n                    <Input type=\"number\" name={edIdx+'-end'}\n                        placeholder=\"End Year\"\n                        value={this.state.education[idx].end}\n                        onChange={this.handleInputChange} />\n                </Col>\n                <Col md={1}>\n                <Button\n                onClick={()=>{this.removeEducation(idx)}}>\n                    -\n                </Button>\n                </Col>\n                </FormGroup>\n            )\n        });\n        return(\n            <div>\n                <FormGroup row>\n                <Label md={2}>Education</Label>\n                </FormGroup>\n                {eds}\n                <FormGroup row>\n                <Label md={2}></Label>\n                <Col md={10}>\n                <Button color=\"primary\"\n                onClick={this.addEducation}>\n                    +\n                </Button>\n                </Col>\n                </FormGroup>\n            </div>\n\n        );\n\n    }\n\n    addSkill(){\n        let sk = this.state.skill;\n        sk.push('');\n        let touched = this.state.touched;\n        touched.skill.push(false);\n        this.setState({skill : sk, touched: touched});\n    }\n\n    removeSkill(idx){\n        let sk = this.state.skill;\n        sk.splice(idx,1);\n        let touched = this.state.touched;\n        touched.skill.splice(idx,1);\n        this.setState({skill : sk, touched: touched});\n    }\n\n    renderSkill(){\n        let sk = this.state.skill;\n        let errors = this.validateSkill(sk);\n        let sks = sk.map((val,idx)=>{\n            let skIdx = `skill-${idx}`;\n            return(\n                <FormGroup row>\n                <Label htmlFor=\"type\" md={2}></Label>\n                <Col md={3}>\n                    <Input type=\"select\" name={skIdx}\n                    value={this.state.skill[idx]}\n                    onChange={this.handleInputChange}\n                    valid={errors.skill[idx] === ''}\n                    invalid={errors.skill[idx] !== ''}\n                    onBlur={()=>{this.handleBlurSkill(idx)}}\n                    >\n                        <option value=''> Select Type</option>\n                        <option>C++</option>\n                        <option>Python</option>\n                    </Input>\n                    <FormFeedback>{errors.skill[idx]}</FormFeedback>\n                </Col>\n                <Col md={1}>\n                <Button\n                onClick={(idx)=>{this.removeSkill(idx);}}>\n                    -\n                </Button>\n                </Col>\n                </FormGroup>\n            )\n        });\n        return(\n            <div>\n                <FormGroup row>\n                <Label md={2}>Skills</Label>\n                </FormGroup>\n                {sks}\n                <FormGroup row>\n                <Label md={2}></Label>\n                <Col md={10}>\n                <Button color=\"primary\"\n                onClick={this.addSkill}>\n                    +\n                </Button>\n                </Col>\n                </FormGroup>\n            </div>\n\n        );\n    }\n\n    handleUserChange(){\n        // console.log('Current State is: ' + JSON.stringify(this.state.formtype));\n        if(this.state.formtype===\"user\"){\n            let eds= this.renderEducation();\n            let sks= this.renderSkill();\n            return(\n                <div>\n                {eds}\n                {sks}\n                <FormGroup row>\n                    <Label htmlFor=\"photo\" md={2}>Profile Photo</Label>\n                    <Col md={10}>\n                        <Input type=\"file\"/>\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label htmlFor=\"resume\" md={2}>Resume</Label>\n                    <Col md={10}>\n                        <Input type=\"file\"/>\n                    </Col>\n                </FormGroup>\n                </div>\n            )\n        }\n        else if(this.state.formtype===\"recruiter\"){\n            const errors = this.validateRecruiter(this.state.telnum, this.state.bio)\n            return(\n                <div>\n                    <FormGroup row>\n                        <Label htmlFor=\"telnum\" md={2}>Contact Number</Label>\n                        <Col md={10}>\n                            <Input type=\"tel\" id=\"telnum\" name=\"telnum\"\n                            value={this.state.telnum}\n                            placeholder=\"Contact Number\"\n                            onChange={this.handleInputChange}\n                            valid={errors.telnum === ''}\n                            invalid={errors.telnum !== ''}\n                            onBlur={()=>{this.handleBlur('telnum')}}\n                            />\n                            <FormFeedback>{errors.telnum}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"bio\" md={2}>Your Bio</Label>\n                        <Col md={10}>\n                            <Input type=\"textarea\" id=\"bio\" name=\"bio\" rows=\"6\"\n                            value={this.state.bio}\n                            onChange={this.handleInputChange}\n                            valid={errors.bio === ''}\n                            invalid={errors.bio !== ''}\n                            onBlur={()=>{this.handleBlur('bio')}}/>\n                        <FormFeedback>{errors.bio}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                </div>\n            );\n        }\n    }\n\n    handleSubmit(event) {\n\n        if(!this.validateSubmit(this.state.firstName,this.state.lastName,this.state.email,this.state.password,this.state.formtype,this.state.bio,this.state.telnum,this.state.skill,this.state.education)){\n            event.preventDefault();\n            return;\n        }\n        if(this.state.formtype==='user')axios({\n            method: \"POST\",\n            url: \"http://localhost:3000/users/signup\",\n            data: this.state,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            alert(\"Welcome! We have you successfully registered.\");\n            console.log(response)\n            window.location.replace(\"http://localhost:3001/login\");\n        }).catch(error => {\n            alert(\"Oops, Something went wrong!!\");\n            if (error) {\n                console.log(error.response);\n                // this.setState({isError: true});\n                // this.setState({errors: error.response.data});\n            }\n        });\n        else if(this.state.formtype==='recruiter')axios({\n            method: \"POST\",\n            url: \"http://localhost:3000/recruiters/signup\",\n            data: this.state,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            alert(\"Welcome! We have you successfully registered.\");\n            console.log(response)\n            window.location.replace(\"http://localhost:3001/login\");\n        }).catch(error => {\n            alert(\"Oops, Something went wrong!!\");\n            if (error) {\n                console.log(error.response);\n                // this.setState({isError: true});\n                // this.setState({errors: error.response.data});\n            }\n        });\n        event.preventDefault();\n    }\n\n    handleBlur = (field)=> {\n        this.setState({\n            touched:{...this.state.touched,[field]:true}\n        });\n    }\n\n    handleBlurEd = (field, idx)=>{\n        let touched = this.state.touched;\n        touched.education[idx][field] = true;\n        this.setState({\n            touched: touched\n        });\n    }\n    handleBlurSkill = (idx)=>{\n        let touched = this.state.touched;\n        touched.skill[idx] = true;\n        this.setState({\n            touched: touched\n        });\n    }\n\n    render(){\n        const errors=this.validate(this.state.firstName,this.state.lastName,this.state.email,this.state.password,this.state.formtype);\n\n        return(\n            <div className=\"container\">\n                <div className=\"row row-content\">\n                    <div className=\"col-12 col-md-9\">\n                        <Form>\n                            <FormGroup row>\n                                <Label htmlFor=\"firstName\" md={2}>First Name</Label>\n                                <Col md={10}>\n                                    <Input type=\"text\" id=\"firstName\" name=\"firstName\"\n                                        placeholder=\"First Name\"\n                                        value={this.state.firstName}\n                                        valid={errors.firstName === ''}\n                                        invalid={errors.firstName !== ''}\n                                        onBlur={()=>{this.handleBlur('firstName')}}\n                                        onChange={this.handleInputChange} />\n                                    <FormFeedback>{errors.firstName}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"lastName\" md={2}>Last Name</Label>\n                                <Col md={10}>\n                                    <Input type=\"text\" id=\"lastName\" name=\"lastName\"\n                                        placeholder=\"Last Name\"\n                                        value={this.state.lastName}\n                                        valid={errors.lastName === ''}\n                                        invalid={errors.lastName !== ''}\n                                        onBlur={()=>{this.handleBlur('lastName')}}\n                                        onChange={this.handleInputChange} />\n                                    <FormFeedback>{errors.lastName}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\n                                <Col md={10}>\n                                    <Input type=\"email\" id=\"email\" name=\"email\"\n                                        placeholder=\"Email\"\n                                        value={this.state.email}\n                                        valid={errors.email === ''}\n                                        invalid={errors.email !== ''}\n                                        onBlur={()=>{this.handleBlur('email')}}\n                                        onChange={this.handleInputChange} />\n                                    <FormFeedback>{errors.email}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"password\" md={2}>Password</Label>\n                                <Col md={10}>\n                                    <Input type=\"password\" id=\"password\" name=\"password\"\n                                        placeholder=\"Password\"\n                                        value={this.state.password}\n                                        valid={errors.password === ''}\n                                        invalid={errors.password !== ''}\n                                        onBlur={()=>{this.handleBlur('password')}}\n                                        onChange={this.handleInputChange} />\n                                    <FormFeedback>{errors.password}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                            <Label htmlFor=\"type\" md={2}>Sign up as </Label>\n                                <Col md={3}>\n                                    <Input type=\"select\" name=\"formtype\" value={this.state.formtype}\n                                    onChange={this.handleInputChange}\n                                    valid={errors.formtype === ''}\n                                    invalid={errors.formtype !== ''}\n                                    onBlur={()=>{this.handleBlur('formtype')}}\n                                    >\n                                        <option selected value=''> Select Type</option>\n                                        <option>user</option>\n                                        <option>recruiter</option>\n                                    </Input>\n                                    <FormFeedback>{errors.formtype}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            {this.handleUserChange()}\n                            <FormGroup row>\n                                <Col md={{size: 10, offset: 2}}>\n                                    <Button type=\"submit\" color=\"primary\" onClick={this.handleSubmit}>\n                                        Sign Up\n                                    </Button>\n                                </Col>\n                            </FormGroup>\n                        </Form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Signup;","/Users/alapan/Documents/ssad/jap/frontend/src/components/DashboardUser.jsx",["108","109","110","111","112","113","114","115","116","117","118","119"],"import React , {Component}from 'react';\nimport {Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback, Card, Row , CardTitle, CardText, Modal, ModalHeader, ModalBody} from 'reactstrap';\nimport { render } from '@testing-library/react';\n\nimport { BrowserRouter as Router, Route, Link , Switch, Redirect} from \"react-router-dom\";\nimport axios from 'axios';\n\nimport HeaderUser from './HeaderUser';\n\n\nclass DashboardUser extends Component{\n    constructor(props){\n        super(props);\n\t\tthis.state = {\n            joblist:[],\n            tempJoblist:[],\n            applist:[],\n            sortBy:'',\n            sortOrder:'asc',\n            salaryLow:null,\n            salaryHigh:null,\n            durationMax:null,\n            jobType:'All',\n            sop:'',\n            currentApplicationJobId:'',\n            isModalOpen : false\n        };\n\n        this.comp = this.comp.bind(this);\n        this.filt = this.filt.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.setSort = this.setSort.bind(this);\n        this.setFilter = this.setFilter.bind(this);\n        this.clear = this.clear.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.submitAppli = this.submitAppli.bind(this);\n        this.getData = this.getData.bind(this);\n    }\n\n    toggleModal(event)\n    {\n        if(this.state.isModalOpen === false)\n        {\n            var jid = event.target.id;\n            //console.log(temp);\n            this.setState({\n                isModalOpen: true,\n                currentApplicationJobId: jid,\n                sop:'',\n            });\n        }\n        else\n        {\n            this.setState({\n                isModalOpen: false,\n                currentApplicationJobId:'',\n                sop:''\n            });\n        }\n    }\n\n    submitAppli(event){\n        event.preventDefault();\n        var jid = this.state.currentApplicationJobId;\n        console.log(jid);\n        var endpoint = \"http://localhost:3000/applications/apply/\"+jid;\n        var data = {};\n        data.sop = this.state.sop;\n        axios({\n            method: \"POST\",\n            url: endpoint,\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            alert(JSON.stringify(response));\n            console.log(response.data);\n            this.setState({isModalOpen:false});\n            this.getData();\n        }).catch(error => {\n            alert(JSON.stringify(error.response));\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n    comp(a,b){\n        let by = this.state.sortBy;\n        let order = this.state.order;\n\n        let factor = 0;\n        if(order==='asc')factor = 0;\n        else if(order==='desc')factor = 1;\n\n        if(a[by]!==undefined && b[by]!==undefined)\n                    return (1-2*factor)*(a[by] - b[by]);\n        else\n            return 1;\n    }\n\n    filt(obj){\n        let val = 1;\n        if(this.state.salaryHigh!==null && this.state.salaryLow!==null){\n            val = val && (obj.salary < this.state.salaryHigh && obj.salary >this.state.salaryLow)\n        }\n        if(this.state.jobType!=='All'){\n                val = val && (obj.type===this.state.jobType);\n        }\n        if(this.state.durationMax!==null){\n            val = val && (obj.duration < this.state.durationMax);\n        }\n        console.log(val);\n        return val;\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        // console.log(name , value);\n        this.setState({\n        [name]: value\n        });\n    }\n\n    setSort(event){\n        const target = event.target;\n        const name = target.name;\n        if(this.state.sortBy===name){\n            if(this.state.order==='desc'){\n                this.setState({\n                    order : 'asc'\n                });\n            }\n            else{\n                this.setState({\n                    order : 'desc'\n                });\n            }\n        }\n        else{\n            this.setState({\n                sortBy : name,\n                order: 'asc'\n            });\n        }\n    }\n\n    setFilter(){\n        console.log('I camr here');\n        let temp = this.state.tempJoblist;\n        temp = temp.filter(this.filt);\n        console.log('I camr temp');\n        console.log(temp);\n        this.setState({tempJoblist:temp});\n\n    }\n\n    clear(){\n        window.location.reload();\n    }\n\n    getData(){\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/jobs\",\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            // alert(JSON.stringify(response));\n            // console.log(response);\n            this.setState({\n                joblist:response.data,\n                tempJoblist:response.data\n            })\n            // console.log(this.state.joblist);\n        }).catch(error => {\n            alert(JSON.stringify(error.response));\n            if (error) {\n                console.log(error.response);\n            }\n        });\n\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/applications/myapplications/\",\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            // alert(JSON.stringify(response));\n            // console.log(response);\n            this.setState({\n                applist:response.data\n            })\n            // console.log(this.state.applist);\n        }).catch(error => {\n            //alert(JSON.stringify(error.response));\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n\n    componentDidMount(){\n        this.getData();\n    }\n\n    render(){\n        console.log(this.state.tempJoblist);\n        console.log(this.state.applist)\n\n        let allApp = this.state.applist;\n        let allAppliedJob = allApp.map((app)=>{\n            return(app.job._id);\n        })\n\n        let allJob = this.state.tempJoblist;\n\n        if(this.state.sortBy!='') allJob.sort(this.comp);\n\n        let jobs = allJob.map((job)=>{\n            let id = job._id;\n            let title = job.title;\n            let skills = job.skills;\n            let deadline = job.deadline;\n            let remAppli = job.remAppli;\n            let remPos = job.remPos;\n            let type = job.type;\n\n            let ButtonApply = <Button id={job._id} onClick={this.toggleModal}>Apply</Button>\n            let ButtonApplied = <Button>Applied</Button>\n            let ButtonFull = <Button>Full</Button>\n\n            let usedButton;\n            if(allAppliedJob.includes(id)){\n                usedButton = ButtonApplied\n            }\n            else{\n                if(remAppli==0 || remPos==0){\n                    usedButton = ButtonFull\n                }\n                else{\n                    usedButton = ButtonApply\n                }\n            }\n            return(\n                <Row>\n                <Col>\n                  <Card body>\n                    <CardTitle tag=\"h5\">{title}</CardTitle>\n                    <CardText>Id : {job._id}</CardText>\n                    <CardText>Skills : {skills}</CardText>\n                    <CardText>Deadline : {deadline}</CardText>\n                    <CardText>Remaining Applications : {remAppli}</CardText>\n                    <CardText>Remaining Positions : {remPos}</CardText>\n                    <CardText>Type of Job : {type}</CardText>\n                    <CardText>Job Creator : {job.creator.email}</CardText>\n                    <CardText>Salary : {job.salary}</CardText>\n                    <CardText>Duration : {job.duration}</CardText>\n                    <CardText>Rating : {job.rating}</CardText>\n                    {usedButton}\n                  </Card>\n                </Col>\n                </Row>\n            )\n        });\n\n        return(\n            <div className=\"container\">\n                <HeaderUser/>\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\n                    <ModalBody>\n                        <Form>\n                            <FormGroup>\n                                <Label htmlFor=\"sop\">SOP</Label>\n                                <Input type=\"textarea\" id=\"sop\" name=\"sop\"  onChange={this.handleInputChange}/>\n                            </FormGroup>\n                            <Button color=\"primary\" onClick={this.submitAppli}>Submit Application</Button>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n                <Form>\n                    <FormGroup row>\n                    <Label htmlFor=\"jobType\" md={2}>Job Type</Label>\n                    <Col md={3}>\n                    <Input type=\"select\" name=\"jobType\" id=\"jobType\" value={this.state.jobType} onChange={this.handleInputChange}>\n                        <option>All</option>\n                        <option>Full Time</option>\n                        <option>Part Time</option>\n                        <option>Work From Home</option>\n                    </Input>\n                    </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                    <Label htmlFor=\"salary\" md={2}>Salary</Label>\n                    <Col md={3}>\n                    <Input type=\"number\" name=\"salaryLow\" value={this.state.salaryLow} onChange={this.handleInputChange}></Input>\n                    <Input type=\"number\" name=\"salaryHigh\" value={this.state.salaryHigh} onChange={this.handleInputChange}></Input>\n                    </Col>\n                    <Label htmlFor=\"durationMax\" md={2}>Duration</Label>\n                    <Col md={3}>\n                    <Input type=\"number\" name=\"durationMax\"value={this.state.duration} onChange={this.handleInputChange}></Input>\n                    </Col>\n                    </FormGroup>\n                    <FormGroup row >\n                    <Col md={6}>\n                    <Button name=\"filterApply\" onClick={this.setFilter}> Apply</Button>\n                    </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                    <Col md={6}>\n                    <Button onClick={this.clear}>Clear</Button>\n                    </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                    <Col md={6}> <Button row name=\"salary\" onClick={this.setSort}>Sort By Salary</Button></Col>\n                    </FormGroup>\n                    <FormGroup row>\n                    <Col md={6}> <Button row name=\"duration\"  onClick={this.setSort}>Sort By Duration</Button></Col>\n                    </FormGroup>\n                    <FormGroup row>\n                    <Col md={6}> <Button row name=\"rating\" onClick={this.setSort}>Sort By Rating</Button></Col>\n                    </FormGroup>\n                    </Form>\n                {jobs}\n            </div>\n        );\n    }\n}\n\nexport default DashboardUser;\n\n\n","/Users/alapan/Documents/ssad/jap/frontend/src/App.js",["120"],"import React,{ Component } from 'react';\nimport Main from './components/Main';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n      <Main />\n    </div>\n  </BrowserRouter>\n  );\n}\n\nexport default App;\n",["121","122"],"/Users/alapan/Documents/ssad/jap/frontend/src/components/ViewApplications.jsx",["123","124","125","126","127","128","129","130","131","132","133"],"import React , {Component}from 'react';\nimport {Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback, Card, Row , CardTitle, CardText, Modal, ModalHeader, ModalBody} from 'reactstrap';\nimport { render } from '@testing-library/react';\n\nimport { BrowserRouter as Router, Route, Link , Switch, Redirect} from \"react-router-dom\";\nimport axios from 'axios';\n\nimport HeaderUser from './HeaderUser';\n\nclass ViewApplications extends Component{\n    constructor(props){\n        super(props);\n\t\tthis.state = {\n            applist:[],\n            appid : '',\n            rate:'',\n            isModalOpen:false\n        };\n\n        this.getData = this.getData.bind(this);\n        this.submitRating = this.submitRating.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n\n    }\n\n    getData(){\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/applications/myapplications/\",\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            alert(JSON.stringify(response));\n            this.setState({\n                applist:response.data\n            })\n        }).catch(error => {\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        // console.log(name , value);\n        this.setState({\n        [name]: value\n        });\n    }\n\n    submitRating(event){\n        event.preventDefault();\n        var appid = this.state.appid;\n        console.log(appid);\n        var endpoint = \"http://localhost:3000/jobs/rate/\"+appid;\n        var data = {};\n        data.rate = this.state.rate;\n        axios({\n            method: \"POST\",\n            url: endpoint,\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            alert(JSON.stringify(response));\n            console.log(response.data);\n            this.setState({isModalOpen:false});\n            this.getData();\n        }).catch(error => {\n            alert(JSON.stringify(error.response));\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n    toggleModal(event)\n    {\n        if(this.state.isModalOpen === false)\n        {\n            var appid = event.target.id;\n            //console.log(temp);\n            this.setState({\n                isModalOpen: true,\n                appid : appid,\n                rate:'',\n            });\n        }\n        else\n        {\n            this.setState({\n                isModalOpen: false,\n                appid:'',\n                rate:''\n            });\n        }\n    }\n\n    componentDidMount(){\n        this.getData();\n    }\n\n    render(){\n\n        console.log(this.state.applist);\n\n        let allApps = this.state.applist;\n\n        let apps = allApps.map((app)=>{\n            let id = app._id\n            let title = app.job.title;\n            let jid = app.job._id;\n\n            let ButtonRate=<Button></Button>;\n            if(app.status==='pending')ButtonRate = <Button>Pending</Button>\n            else if(app.status==='selected' && app.rated===false) ButtonRate = <Button id={app._id} onClick={this.toggleModal}>You are Selected, Rate</Button>\n            else if(app.status==='selected' && app.rated===true) ButtonRate = <Button >Selected, Already Rated</Button>\n            else if(app.status==='shortlisted') ButtonRate = <Button >Shortlisted </Button>\n            else if(app.status==='rejected') ButtonRate = <Button >Rejected </Button>\n\n\n            return(\n                <Row>\n                <Col>\n                  <Card body>\n                    <CardTitle tag=\"h5\">{title}</CardTitle>\n                    <CardText>Id : {app._id}</CardText>\n                    <CardText>Type of Job : {app.job.type}</CardText>\n                    <CardText>Duration : {app.job.duration}</CardText>\n                    <CardText>SOP : {app.sop}</CardText>\n                    <CardText>Rated: {String(app.rated)}</CardText>\n                    <CardText>Status : {app.status}</CardText>\n                    <CardText>Rating: {app.job.rating}</CardText>\n                    {ButtonRate}\n                  </Card>\n                </Col>\n                </Row>\n            )\n        });\n\n        return(<div className=\"container\">\n            <HeaderUser/>\n            <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\n                <ModalBody>\n                    <Form>\n                        <FormGroup>\n                            <Label htmlFor=\"rate\">Rating</Label>\n                            <Input type=\"select\" id=\"rate\" name=\"rate\"  value={this.state.rate} onChange={this.handleInputChange}>\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                            <option>5</option>\n                            </Input>\n                        </FormGroup>\n                        <Button color=\"primary\" onClick={this.submitRating}>Submit Application</Button>\n                    </Form>\n                </ModalBody>\n            </Modal>\n            {apps}\n        </div>)\n    }\n}\n\nexport default ViewApplications;","/Users/alapan/Documents/ssad/jap/frontend/src/reportWebVitals.js",[],["134","135"],"/Users/alapan/Documents/ssad/jap/frontend/src/components/UpdateUser.jsx",["136","137","138","139","140","141","142"],"import React , {Component}from 'react';\nimport {Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback} from 'reactstrap';\nimport {Link} from 'react-router-dom';\nimport { render } from '@testing-library/react';\nimport axios from 'axios';\nimport HeaderUser from './HeaderUser';\n\n\nclass UpdateUser extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            firstName:'',\n            lastName:'',\n            email: '',\n            education:[],\n            skill:[],\n            touched:{\n                firstName:false,\n                lastName:false,\n                email:false,\n                education:[],\n                skill:[],\n            }\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.renderEducation = this.renderEducation.bind(this);\n        this.addEducation = this.addEducation.bind(this);\n        this.removeEducation = this.removeEducation.bind(this);\n        this.renderSkill = this.renderSkill.bind(this);\n        this.addSkill = this.addSkill.bind(this);\n        this.removeSkill= this.removeSkill.bind(this);\n        this.validateEducation= this.validateEducation.bind(this);\n        this.validateSkill= this.validateSkill.bind(this);\n        this.handleBlurSkill = this.handleBlurSkill.bind(this);\n        this.setUpData= this.setUpData.bind(this);\n    }\n\n    setUpData(){\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/users/me\",\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            console.log(response.data);\n            alert(JSON.stringify(response.data));\n            let touched = this.state.touched;\n            var n = response.data.education.length;\n            let education=[];\n            for(var i=0;i<n;i++){\n                education.push({'institute':false, 'start':false, 'end':false});\n            }\n            console.log(education);\n            touched.education = education;\n            n = response.data.skill;\n            for(var i =0;i<n;i++){\n                touched.skill.push(false);\n            }\n\n            this.setState({\n                firstName: response.data.firstName,\n                lastName: response.data.lastName,\n                email: response.data.email,\n                education: response.data.education,\n                skill:response.data.skill,\n                touched: touched\n            })\n        }).catch(error => {\n            alert(\"Oops, Something went wrong!!\");\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n    componentDidMount(){\n        this.setUpData();\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        // console.log(name , value);\n\n        let tok = name.split('-');\n        if(tok[0]==='education'){\n            let ed = this.state.education;\n            let pos = Number(tok[1]);\n            let field = tok[2];\n            ed[pos][field] = value;\n            this.setState({education:ed});\n        }\n        else if(tok[0]==='skill'){\n            let sk = this.state.skill;\n            let pos = Number(tok[1]);\n            sk[pos] = value;\n            this.setState({skill:sk});\n        }\n        else{\n            this.setState({\n            [name]: value\n            });\n        }\n    }\n\n    validateSubmit(firstName,lastName,email,skill,education){\n        if((firstName.length === 0)){\n            alert('First Name is required');\n            return false;\n        }\n        if((lastName.length===0)){\n            alert('Last Name is required');\n            return false;\n        }\n        const reg = /^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+.+(?:.[a-zA-Z0-9-]))$/;\n        if(!reg.test(email)){\n            alert('Invalid Email');\n            return false;\n        }\n        var i, n = skill.length;\n        for(i=0;i<n;i++){\n            if((this.state['skill'][i] === '')){\n                alert(\"Skill is compulsory. Please remove the skill if not required\")\n                return false;\n            }\n        }\n        var i,n = education.length;\n        for(i=0;i<n;i++){\n            if(this.state.education[i].institute.length === 0){\n                    alert('Institute Name is required, remove if not to be added');\n                    return false;\n            }\n            if(this.state.formtype==='user' && (this.state.education[i].start === '' || Number(this.state.education.start)<=0)){\n                alert('Start Year is required');\n                return false;\n            }\n        }\n\n        return true;\n\n    }\n\n\n\n    validate(firstName,lastName,email) {\n        const errors={\n            firstName:'',\n            lastName:'',\n            email: '',\n        };\n        if(this.state.touched.firstName && (firstName.length === 0)){\n            errors.firstName='First Name is required';\n        }\n        if(this.state.touched.lastName && (lastName.length===0)){\n            errors.lastName='Last Name is required';\n        }\n        const reg = /^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+.+(?:.[a-zA-Z0-9-]))$/;\n        if(this.state.touched.email && !reg.test(email)){\n            errors.email='Invalid Email';\n        }\n        return errors;\n    }\n\n\n    validateEducation(education){\n        let errors={};\n        errors.education = [];\n        var i,n = education.length;\n        for(i=0;i<n;i++){\n            errors.education.push({institute:'', start: '', end:''});\n            if(this.state.touched.education[i].institute && this.state.education[i].institute.length === 0){\n                    errors.education[i].institute = 'Institute Name is required, remove if not to be added';\n            }\n            if(this.state.touched.education[i].start && (this.state.education[i].start === '' || Number(this.state.education.start)<=0)){\n                errors.education[i].start = 'Start Year is required';\n            }\n        }\n        return errors;\n    }\n\n    validateSkill(skill){\n        let errors ={}\n        errors.skill=[];\n        var i, n = skill.length;\n        for(i=0;i<n;i++){\n            errors.skill.push('');\n            if(this.state.touched['skill'][i] && (this.state['skill'][i] === '')){\n                errors['skill'][i] = \"Skill is compulsory. Please remove the skill if not required\"\n            }\n        }\n        return errors;\n    }\n\n    addEducation(){\n        let ed = this.state.education;\n        ed.push({institute:'', start:'',end:''});\n        let touched = this.state.touched;\n        touched.education.push({institute:false,start:false,end:false});\n        this.setState({education : ed, touched: touched});\n    }\n\n    removeEducation(idx){\n        console.log(idx);\n        let ed = this.state.education;\n        ed.splice(idx,1);\n        let touched = this.state.touched;\n        touched.education.splice(idx,1);\n        this.setState({education : ed, touched: touched});\n    }\n\n    renderEducation(){\n        let ed = this.state.education;\n\n        let errors = this.validateEducation(ed);\n\n        let eds = ed.map((val,idx)=>{\n            let edIdx = `education-${idx}`;\n            return(\n                <FormGroup row>\n                <Label md={2}></Label>\n                <Col md={6}>\n                    <Input type=\"text\" name={edIdx+'-institute'}\n                        placeholder=\"Institute Name\"\n                        value={this.state.education[idx].institute}\n                        onChange={this.handleInputChange}\n                        valid={errors.education[idx].institute === ''}\n                        invalid={errors.education[idx].institute !== ''}\n                        onBlur={()=>{this.handleBlurEd('institute', idx)}}\n                        />\n                        <FormFeedback>{errors.education[idx].institute}</FormFeedback>\n                    <Input type=\"number\" name={edIdx+'-start'}\n                        placeholder=\"Start Year\"\n                        value={this.state.education[idx].start}\n                        onChange={this.handleInputChange}\n                        valid={errors.education[idx].start === ''}\n                        invalid={errors.education[idx].start !== ''}\n                        onBlur={()=>{this.handleBlurEd('start',idx)}}\n                        />\n                        <FormFeedback>{errors.education[idx].start}</FormFeedback>\n\n                    <Input type=\"number\" name={edIdx+'-end'}\n                        placeholder=\"End Year\"\n                        value={this.state.education[idx].end}\n                        onChange={this.handleInputChange} />\n                </Col>\n                <Col md={1}>\n                <Button\n                onClick={()=>{this.removeEducation(idx)}}>\n                    -\n                </Button>\n                </Col>\n                </FormGroup>\n            )\n        });\n        return(\n            <div>\n                <FormGroup row>\n                <Label md={2}>Education</Label>\n                </FormGroup>\n                {eds}\n                <FormGroup row>\n                <Label md={2}></Label>\n                <Col md={10}>\n                <Button color=\"primary\"\n                onClick={this.addEducation}>\n                    +\n                </Button>\n                </Col>\n                </FormGroup>\n            </div>\n\n        );\n\n    }\n\n    addSkill(){\n        let sk = this.state.skill;\n        sk.push('');\n        let touched = this.state.touched;\n        touched.skill.push(false);\n        this.setState({skill : sk, touched: touched});\n    }\n\n    removeSkill(idx){\n        let sk = this.state.skill;\n        sk.splice(idx,1);\n        let touched = this.state.touched;\n        touched.skill.splice(idx,1);\n        this.setState({skill : sk, touched: touched});\n    }\n\n    renderSkill(){\n        let sk = this.state.skill;\n        let errors = this.validateSkill(sk);\n        let sks = sk.map((val,idx)=>{\n            let skIdx = `skill-${idx}`;\n            return(\n                <FormGroup row>\n                <Label htmlFor=\"type\" md={2}></Label>\n                <Col md={3}>\n                    <Input type=\"select\" name={skIdx}\n                    value={this.state.skill[idx]}\n                    onChange={this.handleInputChange}\n                    valid={errors.skill[idx] === ''}\n                    invalid={errors.skill[idx] !== ''}\n                    onBlur={()=>{this.handleBlurSkill(idx)}}\n                    >\n                        <option value=''> Select Type</option>\n                        <option>C++</option>\n                        <option>Python</option>\n                    </Input>\n                    <FormFeedback>{errors.skill[idx]}</FormFeedback>\n                </Col>\n                <Col md={1}>\n                <Button\n                onClick={(idx)=>{this.removeSkill(idx);}}>\n                    -\n                </Button>\n                </Col>\n                </FormGroup>\n            )\n        });\n        return(\n            <div>\n                <FormGroup row>\n                <Label md={2}>Skills</Label>\n                </FormGroup>\n                {sks}\n                <FormGroup row>\n                <Label md={2}></Label>\n                <Col md={10}>\n                <Button color=\"primary\"\n                onClick={this.addSkill}>\n                    +\n                </Button>\n                </Col>\n                </FormGroup>\n            </div>\n\n        );\n    }\n\n    handleBlur = (field)=> {\n        this.setState({\n            touched:{...this.state.touched,[field]:true}\n        });\n    }\n\n    handleBlurEd = (field, idx)=>{\n        let touched = this.state.touched;\n        touched.education[idx][field] = true;\n        this.setState({\n            touched: touched\n        });\n    }\n    handleBlurSkill = (idx)=>{\n        let touched = this.state.touched;\n        touched.skill[idx] = true;\n        this.setState({\n            touched: touched\n        });\n    }\n\n    handleSubmit(event) {\n\n        if(!this.validateSubmit(this.state.firstName, this.state.lastName, this.state.email, this.state.skill, this.state.education)){\n            event.preventDefault();\n            return;\n        }\n\n        alert(JSON.stringify(this.state));\n        // alert('Current State is: ' + JSON.stringify(this.state));\n        axios({\n            method: \"PUT\",\n            url: \"http://localhost:3000/users/me\",\n            data: this.state,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            alert(\"Done\");\n            console.log(response)\n        }).catch(error => {\n            alert(\"Oops Sorry Something went Wrong!!\");\n            if (error) {\n                console.log(error.response);\n            }\n        });\n        event.preventDefault();\n    }\n\n    render(){\n        let eds= this.renderEducation();\n        let sks= this.renderSkill();\n\n        let errors = this.validate(this.state.firstName, this.state.lastName, this.state.email);\n\n        return(\n            <div className=\"container\">\n                <HeaderUser/>\n                <div className=\"row row-content\">\n                    <div className=\"col-12 col-md-9\">\n                        <Form>\n                            <FormGroup row>\n                                <Label htmlFor=\"firstName\" md={2}>First Name</Label>\n                                <Col md={10}>\n                                    <Input type=\"text\" id=\"firstName\" name=\"firstName\"\n                                        placeholder=\"First Name\"\n                                        value={this.state.firstName}\n                                        valid={errors.firstName === ''}\n                                        invalid={errors.firstName !== ''}\n                                        onBlur={()=>{this.handleBlur('firstName')}}\n                                        onChange={this.handleInputChange} />\n                                    <FormFeedback>{errors.firstName}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"lastName\" md={2}>Last Name</Label>\n                                <Col md={10}>\n                                    <Input type=\"text\" id=\"lastName\" name=\"lastName\"\n                                        placeholder=\"Last Name\"\n                                        value={this.state.lastName}\n                                        valid={errors.lastName === ''}\n                                        invalid={errors.lastName !== ''}\n                                        onBlur={()=>{this.handleBlur('lastName')}}\n                                        onChange={this.handleInputChange} />\n                                    <FormFeedback>{errors.lastName}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\n                                <Col md={10}>\n                                    <Input type=\"email\" id=\"email\" name=\"email\"\n                                        placeholder=\"Email\"\n                                        value={this.state.email}\n                                        valid={errors.email === ''}\n                                        invalid={errors.email !== ''}\n                                        onBlur={()=>{this.handleBlur('email')}}\n                                        onChange={this.handleInputChange} />\n                                    <FormFeedback>{errors.email}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            {eds}\n                            {sks}\n                            <FormGroup row>\n                            <Label htmlFor=\"photo\" md={2}>Profile Photo</Label>\n                            <Col md={10}>\n                                <Input type=\"file\"/>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row>\n                            <Label htmlFor=\"resume\" md={2}>Resume</Label>\n                            <Col md={10}>\n                                <Input type=\"file\"/>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row>\n                            <Col md={{size: 10, offset: 2}}>\n                                <Button type=\"submit\" color=\"primary\" onClick={this.handleSubmit}>\n                                    Edit\n                                </Button>\n                            </Col>\n                        </FormGroup>\n                        </Form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default UpdateUser;","/Users/alapan/Documents/ssad/jap/frontend/src/components/Main.jsx",["143","144","145","146"],"/Users/alapan/Documents/ssad/jap/frontend/src/components/UpdateRecruiter.jsx",["147","148","149","150","151","152","153","154"],"/Users/alapan/Documents/ssad/jap/frontend/src/components/DashboardRecruiter.jsx",["155","156","157","158","159","160","161","162","163"],"/Users/alapan/Documents/ssad/jap/frontend/src/components/SelectedJobApps.jsx",["164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181"],"import React , {Component}from 'react';\nimport {Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback, Card, Row , CardTitle, CardText, Modal, ModalHeader, ModalBody} from 'reactstrap';\nimport { render } from '@testing-library/react';\n\nimport { BrowserRouter as Router, Route, Link , Switch, Redirect} from \"react-router-dom\";\nimport axios from 'axios';\n\nimport HeaderRecruiter from './HeaderRecruiter';\n\nclass SelectedJobApps extends Component{\n    constructor(props){\n        super(props);\n\t\tthis.state = {\n            applist:[],\n            sortBy:'',\n            order:'desc'\n        };\n\n        this.getData = this.getData.bind(this);\n        this.handleButton = this.handleButton.bind(this);\n        this.setSort = this.setSort.bind(this);\n        this.comp = this.comp.bind(this);\n\n    }\n\n    comp(a,b){\n        let by = this.state.sortBy;\n        let order = this.state.order;\n        if(this.state.sortBy===\"rating\"){\n            let factor = 0;\n            if(order==='asc')factor = 0;\n            else if(order==='desc')factor = 1;\n\n            if(a[by]!==undefined && b[by]!==undefined)\n                return (1-2*factor)*(a[by] - b[by]);\n            else\n                return 1;\n        }\n        else if(this.state.sortBy===\"name\"){\n            let str1 = a[\"name\"];\n            let str2 = b[\"name\"];\n\n\n            if(this.state.order==='asc')return str1.localeCompare(str2);\n            else{\n                return str2.localeCompare(str1);\n            }\n        }\n        else if(this.state.sortBy===\"createdAt\"){\n            let flag;\n\n            let str1 = a[\"createdAt\"];\n            let str2 = b[\"createdAt\"];\n\n\n            if(this.state.order==='asc')flag = 0;\n            else if(this.state.order==='desc') flag = 1;\n            return (1 - flag*2) * (new Date(str1) - new Date(str2));\n        }\n    }\n\n    setSort(event){\n        const target = event.target;\n        const name = target.name;\n        this.setState({\n            sortBy : name\n        });\n\n\n        if(this.state.order==='desc'){\n            this.setState({\n                order : 'asc'\n            });\n        }\n        else{\n            this.setState({\n                order : 'desc'\n            });\n        }\n        console.log(this.state.sortBy);\n        console.log(this.state.order);\n    }\n\n    handleButton(event){\n        let name = event.target.name;\n        let id = event.target.id;\n        axios({\n            method: \"PUT\",\n            data:{'status':name},\n            url: \"http://localhost:3000/applications/status/\"+id,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            alert(JSON.stringify(response));\n            this.getData();\n        }).catch(error => {\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n    getData(){\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/applications/appliedto/\"+this.props.jobid,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            alert(JSON.stringify(response));\n            this.setState({\n                applist:response.data\n            })\n        }).catch(error => {\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n    componentDidMount(){\n        this.getData();\n    }\n\n    render(){\n\n        // console.log(this.state.applist);\n        let allApps = this.state.applist;\n\n        let Apps = allApps.map((app)=>{\n            app.name = app.applier.firstName;\n            app.time = app.createdAt;\n            app.rating = app.applier.rating;\n            return app;\n        })\n\n        if(this.state.sortBy!==''){\n            console.log('1')\n            Apps = Apps.sort(this.comp);\n        }\n\n\n        let apps = Apps.map((app)=>{\n            let id = app._id\n            let ButtonStatus;\n            if(app.status==='pending')ButtonStatus= <Button id={app._id} name='shortlisted' onClick={this.handleButton}>Shortlist</Button>\n            else if(app.status==='selected') ButtonStatus = <Button id={app._id} name='selected'>Selected</Button>\n            else if(app.status==='shortlisted') ButtonStatus = <Button name='selected' id={app._id} onClick={this.handleButton}>Select</Button>\n            else ButtonStatus = <div></div>;\n\n            let ButtonReject;\n            if(app.status !== 'rejected')ButtonReject = <Button id={app._id} name='rejected' onClick={this.handleButton}> Reject </Button>\n            else return null;\n\n            return(\n                <Row>\n                <Col>\n                  <Card body>\n                    <CardText>Id: {app._id}</CardText>\n                    <CardText>SOP: {app.sop}</CardText>\n                    <CardText>Email: {app.applier.email}</CardText>\n                    <CardText>Rating: {app.rating}</CardText>\n                    <CardText>Name: {app.name}</CardText>\n                    <CardText>Time of Creation: {app.createdAt}</CardText>\n                    {ButtonStatus}\n                    {ButtonReject}\n                  </Card>\n                </Col>\n                </Row>\n            )\n        });\n\n        return(<div className=\"container\">\n                <HeaderRecruiter />\n                <Col md={6}> <Button row name=\"createdAt\" onClick={this.setSort}>Sort By Creation Time</Button></Col>\n                <Col md={6}> <Button row name=\"name\" onClick={this.setSort}>Sort By Name</Button></Col>\n                <Col md={6}> <Button row name=\"rating\" onClick={this.setSort}>Sort By Rating</Button></Col>\n            {apps}\n        </div>)\n    }\n}\n\nexport default SelectedJobApps;","/Users/alapan/Documents/ssad/jap/frontend/src/components/SelectedApplicants.jsx",["182","183","184","185","186","187","188","189","190","191","192","193","194","195"],"import React , {Component}from 'react';\nimport {Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback, Card, Row , CardTitle, CardText, Modal, ModalHeader, ModalBody} from 'reactstrap';\nimport { render } from '@testing-library/react';\n\nimport { BrowserRouter as Router, Route, Link , Switch, Redirect} from \"react-router-dom\";\nimport axios from 'axios';\n\nimport HeaderRecruiter from './HeaderRecruiter';\nimport HeaderUser from './HeaderUser';\n\n\nclass SelectedApplications extends Component{\n    constructor(props){\n        super(props);\n\t\tthis.state = {\n            applist:[],\n            rating:'',\n            selectedId:'',\n            sortBy:'',\n            order:''\n        };\n        this.getData = this.getData.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.submitRating = this.submitRating.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.comp = this.comp.bind(this);\n        this.setSort = this.setSort.bind(this);\n\n    }\n\n    getData(){\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/applications/selected\",\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            alert(JSON.stringify(response));\n            this.setState({\n                applist:response.data,\n                isModalOpen:false\n            })\n        }).catch(error => {\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        this.setState({\n        [name]: value\n        });\n    }\n    comp(a,b){\n\n        if(this.state.sortBy == \"applicantRating\"){\n            let by = this.state.sortBy;\n            let order = this.state.order;\n\n            let factor = 0;\n            if(order==='asc')factor = 0;\n            else if(order==='desc')factor = 1;\n\n            if(a[by]!==undefined && b[by]!==undefined)\n                        return (1-2*factor)*(a[by] - b[by]);\n            else\n                return 1;\n        }\n        else if(this.state.sortBy===\"applicantName\"){\n            let str1 = a[\"applicantName\"];\n            let str2 = b[\"applicantName\"];\n\n\n            if(this.state.order==='asc')return str1.localeCompare(str2);\n            else{\n                return str2.localeCompare(str1);\n            }\n        }\n        else if(this.state.sortBy===\"dateOfJoining\"){\n            let flag;\n\n            let str1 = a[\"dateOfJoining\"];\n            let str2 = b[\"dateOfJoining\"];\n\n            console.log(str1, str2);\n            if(this.state.order==='asc')flag = 0;\n            else if(this.state.order==='desc') flag = 1;\n            return (1 - flag*2) * (new Date(str1) - new Date(str2));\n        }\n        else{\n            let str1 = a[\"jobtitle\"];\n            let str2 = b[\"jobtitle\"];\n\n            console.log(str1, str2);\n            if(this.state.order==='asc')return str1.localeCompare(str2);\n            else{\n                return str2.localeCompare(str1);\n            }\n        }\n    }\n\n    setSort(event){\n        const target = event.target;\n        const name = target.name;\n        this.setState({\n            sortBy : name\n        });\n        if(this.state.order=='desc'){\n            this.setState({\n                order : 'asc'\n            });\n        }\n        else{\n            this.setState({\n                order : 'desc'\n            });\n        }\n    }\n\n    toggleModal(event){\n        if(this.state.isModalOpen === false)\n        {\n            var appid = event.target.id;\n            this.setState({\n                isModalOpen: true,\n                selectedId: appid,\n                rating:''\n            });\n        }\n        else\n        {\n            this.setState({\n                isModalOpen: false,\n                selectedId:'',\n                rating:''\n            });\n        }\n    }\n\n    submitRating(event){\n        event.preventDefault();\n        var appid = this.state.selectedId;\n        console.log(appid);\n        var endpoint = \"http://localhost:3000/users/rate/\"+appid;\n        var data = {};\n        data.rating = this.state.rating;\n        axios({\n            method: \"POST\",\n            url: endpoint,\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            alert(JSON.stringify(response));\n            console.log(response.data);\n            this.setState({isModalOpen:false});\n            this.getData();\n        }).catch(error => {\n            alert(JSON.stringify(error.response));\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n    componentDidMount(){\n        this.getData();\n    }\n\n    render(){\n\n        let allApps = this.state.applist;\n\n        let Apps = allApps.map((app)=>{\n            app.jobtitle = app.job.title;\n            app.applicantRating = app.applier.rating;\n            app.applicantName = app.applier.firstName;\n            return app;\n        })\n\n        if(this.state.sortBy!==''){\n            Apps = Apps.sort(this.comp);\n        }\n\n        let apps = Apps.map((app)=>{\n            let id = app._id\n\n            return(\n                <div className=\"container\">\n                    <Row>\n                        <Col>\n                            <Card body>\n                                <CardText>Id: {app._id}</CardText>\n                                <CardText>SOP: {app.sop}</CardText>\n                                <CardText>Applicant Email:{app.applier.email}</CardText>\n                                <CardText>Applicant Rating:{app.applier.rating}</CardText>\n                                <CardText>Applicant Name:{app.applier.firstName}</CardText>\n                                <CardText>Time of Creation:{app.createdAt}</CardText>\n                                <CardText>Time of Joining:{app.dateOfJoining}</CardText>\n                                <CardText>Title of Job:{app.job.title}</CardText>\n                                <Button id={app._id} onClick={this.toggleModal}>Rate</Button>\n                            </Card>\n                        </Col>\n                    </Row>\n                </div>\n            )\n        });\n\n        return(<div className=\"container\">\n            <HeaderRecruiter/>\n            <Form>\n            <FormGroup row>\n                    <Col md={6}> <Button row name=\"jobtitle\" onClick={this.setSort}>Sort By Title</Button></Col>\n                    </FormGroup>\n                    <FormGroup row>\n                    <Col md={6}> <Button row name=\"dateOfJoining\"  onClick={this.setSort}>Sort By DOJ</Button></Col>\n                    </FormGroup>\n                    <FormGroup row>\n                    <Col md={6}> <Button row name=\"applicantRating\" onClick={this.setSort}>Sort By Rating</Button></Col>\n            </FormGroup>\n            <FormGroup row>\n                    <Col md={6}> <Button row name=\"applicantName\" onClick={this.setSort}>Sort By Applicant Name</Button></Col>\n            </FormGroup>\n            </Form>\n            <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                <ModalHeader toggle={this.toggleModal}>Rate</ModalHeader>\n                <ModalBody>\n                    <Form>\n                        <FormGroup>\n                            <Label htmlFor=\"rating\"></Label>\n                            <Input type=\"select\" id=\"rating\" name=\"rating\" value={this.state.rating} onChange={this.handleInputChange}>\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                            <option>5</option>\n                            </Input>\n                        </FormGroup>\n                        <Button color=\"primary\" onClick={this.submitRating}>Rate</Button>\n                    </Form>\n                </ModalBody>\n            </Modal>\n            {apps}\n        </div>)\n    }\n}\n\n\n\nexport default SelectedApplications;","/Users/alapan/Documents/ssad/jap/frontend/src/components/Logout.jsx",["196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211"],"/Users/alapan/Documents/ssad/jap/frontend/src/components/HeaderUser.jsx",["212","213","214","215","216","217","218","219","220"],"/Users/alapan/Documents/ssad/jap/frontend/src/components/HeaderRecruiter.jsx",["221","222","223","224","225","226","227","228","229"],{"ruleId":"230","severity":1,"message":"231","line":2,"column":9,"nodeType":"232","messageId":"233","endLine":2,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":2,"column":21,"nodeType":"232","messageId":"233","endLine":2,"endColumn":35},{"ruleId":"230","severity":1,"message":"235","line":2,"column":81,"nodeType":"232","messageId":"233","endLine":2,"endColumn":93},{"ruleId":"230","severity":1,"message":"236","line":3,"column":10,"nodeType":"232","messageId":"233","endLine":3,"endColumn":16},{"ruleId":"230","severity":1,"message":"237","line":5,"column":27,"nodeType":"232","messageId":"233","endLine":5,"endColumn":33},{"ruleId":"230","severity":1,"message":"238","line":5,"column":35,"nodeType":"232","messageId":"233","endLine":5,"endColumn":40},{"ruleId":"230","severity":1,"message":"239","line":5,"column":42,"nodeType":"232","messageId":"233","endLine":5,"endColumn":46},{"ruleId":"230","severity":1,"message":"240","line":5,"column":49,"nodeType":"232","messageId":"233","endLine":5,"endColumn":55},{"ruleId":"230","severity":1,"message":"241","line":5,"column":57,"nodeType":"232","messageId":"233","endLine":5,"endColumn":65},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","replacedBy":"245"},{"ruleId":"230","severity":1,"message":"231","line":2,"column":9,"nodeType":"232","messageId":"233","endLine":2,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":2,"column":21,"nodeType":"232","messageId":"233","endLine":2,"endColumn":35},{"ruleId":"230","severity":1,"message":"235","line":2,"column":81,"nodeType":"232","messageId":"233","endLine":2,"endColumn":93},{"ruleId":"230","severity":1,"message":"236","line":3,"column":10,"nodeType":"232","messageId":"233","endLine":3,"endColumn":16},{"ruleId":"230","severity":1,"message":"237","line":5,"column":27,"nodeType":"232","messageId":"233","endLine":5,"endColumn":33},{"ruleId":"230","severity":1,"message":"238","line":5,"column":35,"nodeType":"232","messageId":"233","endLine":5,"endColumn":40},{"ruleId":"230","severity":1,"message":"239","line":5,"column":42,"nodeType":"232","messageId":"233","endLine":5,"endColumn":46},{"ruleId":"230","severity":1,"message":"240","line":5,"column":49,"nodeType":"232","messageId":"233","endLine":5,"endColumn":55},{"ruleId":"230","severity":1,"message":"241","line":5,"column":57,"nodeType":"232","messageId":"233","endLine":5,"endColumn":65},{"ruleId":"246","severity":1,"message":"247","line":18,"column":13,"nodeType":"248","messageId":"249","endLine":18,"endColumn":17},{"ruleId":"230","severity":1,"message":"231","line":2,"column":9,"nodeType":"232","messageId":"233","endLine":2,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":2,"column":21,"nodeType":"232","messageId":"233","endLine":2,"endColumn":35},{"ruleId":"230","severity":1,"message":"239","line":3,"column":9,"nodeType":"232","messageId":"233","endLine":3,"endColumn":13},{"ruleId":"230","severity":1,"message":"236","line":4,"column":10,"nodeType":"232","messageId":"233","endLine":4,"endColumn":16},{"ruleId":"250","severity":1,"message":"251","line":117,"column":13,"nodeType":"232","messageId":"252","endLine":117,"endColumn":14},{"ruleId":"250","severity":1,"message":"253","line":117,"column":15,"nodeType":"232","messageId":"252","endLine":117,"endColumn":16},{"ruleId":"230","severity":1,"message":"231","line":2,"column":9,"nodeType":"232","messageId":"233","endLine":2,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":2,"column":21,"nodeType":"232","messageId":"233","endLine":2,"endColumn":35},{"ruleId":"230","severity":1,"message":"235","line":2,"column":81,"nodeType":"232","messageId":"233","endLine":2,"endColumn":93},{"ruleId":"230","severity":1,"message":"236","line":3,"column":10,"nodeType":"232","messageId":"233","endLine":3,"endColumn":16},{"ruleId":"230","severity":1,"message":"237","line":5,"column":27,"nodeType":"232","messageId":"233","endLine":5,"endColumn":33},{"ruleId":"230","severity":1,"message":"238","line":5,"column":35,"nodeType":"232","messageId":"233","endLine":5,"endColumn":40},{"ruleId":"230","severity":1,"message":"239","line":5,"column":42,"nodeType":"232","messageId":"233","endLine":5,"endColumn":46},{"ruleId":"230","severity":1,"message":"240","line":5,"column":49,"nodeType":"232","messageId":"233","endLine":5,"endColumn":55},{"ruleId":"230","severity":1,"message":"241","line":5,"column":57,"nodeType":"232","messageId":"233","endLine":5,"endColumn":65},{"ruleId":"254","severity":1,"message":"255","line":224,"column":29,"nodeType":"256","messageId":"249","endLine":224,"endColumn":31},{"ruleId":"254","severity":1,"message":"257","line":244,"column":28,"nodeType":"256","messageId":"249","endLine":244,"endColumn":30},{"ruleId":"254","severity":1,"message":"257","line":244,"column":41,"nodeType":"256","messageId":"249","endLine":244,"endColumn":43},{"ruleId":"230","severity":1,"message":"258","line":1,"column":16,"nodeType":"232","messageId":"233","endLine":1,"endColumn":25},{"ruleId":"242","replacedBy":"259"},{"ruleId":"244","replacedBy":"260"},{"ruleId":"230","severity":1,"message":"231","line":2,"column":9,"nodeType":"232","messageId":"233","endLine":2,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":2,"column":21,"nodeType":"232","messageId":"233","endLine":2,"endColumn":35},{"ruleId":"230","severity":1,"message":"235","line":2,"column":81,"nodeType":"232","messageId":"233","endLine":2,"endColumn":93},{"ruleId":"230","severity":1,"message":"236","line":3,"column":10,"nodeType":"232","messageId":"233","endLine":3,"endColumn":16},{"ruleId":"230","severity":1,"message":"237","line":5,"column":27,"nodeType":"232","messageId":"233","endLine":5,"endColumn":33},{"ruleId":"230","severity":1,"message":"238","line":5,"column":35,"nodeType":"232","messageId":"233","endLine":5,"endColumn":40},{"ruleId":"230","severity":1,"message":"239","line":5,"column":42,"nodeType":"232","messageId":"233","endLine":5,"endColumn":46},{"ruleId":"230","severity":1,"message":"240","line":5,"column":49,"nodeType":"232","messageId":"233","endLine":5,"endColumn":55},{"ruleId":"230","severity":1,"message":"241","line":5,"column":57,"nodeType":"232","messageId":"233","endLine":5,"endColumn":65},{"ruleId":"230","severity":1,"message":"261","line":116,"column":17,"nodeType":"232","messageId":"233","endLine":116,"endColumn":19},{"ruleId":"230","severity":1,"message":"262","line":118,"column":17,"nodeType":"232","messageId":"233","endLine":118,"endColumn":20},{"ruleId":"242","replacedBy":"263"},{"ruleId":"244","replacedBy":"264"},{"ruleId":"230","severity":1,"message":"231","line":2,"column":9,"nodeType":"232","messageId":"233","endLine":2,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":2,"column":21,"nodeType":"232","messageId":"233","endLine":2,"endColumn":35},{"ruleId":"230","severity":1,"message":"239","line":3,"column":9,"nodeType":"232","messageId":"233","endLine":3,"endColumn":13},{"ruleId":"230","severity":1,"message":"236","line":4,"column":10,"nodeType":"232","messageId":"233","endLine":4,"endColumn":16},{"ruleId":"250","severity":1,"message":"251","line":60,"column":21,"nodeType":"232","messageId":"252","endLine":60,"endColumn":22},{"ruleId":"250","severity":1,"message":"251","line":132,"column":13,"nodeType":"232","messageId":"252","endLine":132,"endColumn":14},{"ruleId":"250","severity":1,"message":"253","line":132,"column":15,"nodeType":"232","messageId":"252","endLine":132,"endColumn":16},{"ruleId":"230","severity":1,"message":"237","line":2,"column":27,"nodeType":"232","messageId":"233","endLine":2,"endColumn":33},{"ruleId":"230","severity":1,"message":"239","line":2,"column":42,"nodeType":"232","messageId":"233","endLine":2,"endColumn":46},{"ruleId":"254","severity":1,"message":"257","line":76,"column":28,"nodeType":"256","messageId":"249","endLine":76,"endColumn":30},{"ruleId":"254","severity":1,"message":"257","line":76,"column":58,"nodeType":"256","messageId":"249","endLine":76,"endColumn":60},{"ruleId":"230","severity":1,"message":"231","line":2,"column":9,"nodeType":"232","messageId":"233","endLine":2,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":2,"column":21,"nodeType":"232","messageId":"233","endLine":2,"endColumn":35},{"ruleId":"230","severity":1,"message":"239","line":3,"column":9,"nodeType":"232","messageId":"233","endLine":3,"endColumn":13},{"ruleId":"230","severity":1,"message":"236","line":4,"column":10,"nodeType":"232","messageId":"233","endLine":4,"endColumn":16},{"ruleId":"265","severity":1,"message":"266","line":199,"column":41,"nodeType":"267","endLine":199,"endColumn":74},{"ruleId":"265","severity":1,"message":"266","line":213,"column":41,"nodeType":"267","endLine":213,"endColumn":74},{"ruleId":"265","severity":1,"message":"266","line":226,"column":37,"nodeType":"267","endLine":226,"endColumn":70},{"ruleId":"265","severity":1,"message":"266","line":239,"column":37,"nodeType":"267","endLine":239,"endColumn":70},{"ruleId":"230","severity":1,"message":"231","line":2,"column":9,"nodeType":"232","messageId":"233","endLine":2,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":2,"column":21,"nodeType":"232","messageId":"233","endLine":2,"endColumn":35},{"ruleId":"230","severity":1,"message":"235","line":2,"column":81,"nodeType":"232","messageId":"233","endLine":2,"endColumn":93},{"ruleId":"230","severity":1,"message":"236","line":3,"column":10,"nodeType":"232","messageId":"233","endLine":3,"endColumn":16},{"ruleId":"230","severity":1,"message":"237","line":5,"column":27,"nodeType":"232","messageId":"233","endLine":5,"endColumn":33},{"ruleId":"230","severity":1,"message":"238","line":5,"column":35,"nodeType":"232","messageId":"233","endLine":5,"endColumn":40},{"ruleId":"230","severity":1,"message":"240","line":5,"column":49,"nodeType":"232","messageId":"233","endLine":5,"endColumn":55},{"ruleId":"230","severity":1,"message":"241","line":5,"column":57,"nodeType":"232","messageId":"233","endLine":5,"endColumn":65},{"ruleId":"254","severity":1,"message":"257","line":157,"column":26,"nodeType":"256","messageId":"249","endLine":157,"endColumn":28},{"ruleId":"230","severity":1,"message":"231","line":2,"column":9,"nodeType":"232","messageId":"233","endLine":2,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":2,"column":21,"nodeType":"232","messageId":"233","endLine":2,"endColumn":35},{"ruleId":"230","severity":1,"message":"268","line":2,"column":45,"nodeType":"232","messageId":"233","endLine":2,"endColumn":49},{"ruleId":"230","severity":1,"message":"269","line":2,"column":51,"nodeType":"232","messageId":"233","endLine":2,"endColumn":60},{"ruleId":"230","severity":1,"message":"270","line":2,"column":62,"nodeType":"232","messageId":"233","endLine":2,"endColumn":67},{"ruleId":"230","severity":1,"message":"271","line":2,"column":69,"nodeType":"232","messageId":"233","endLine":2,"endColumn":74},{"ruleId":"230","severity":1,"message":"235","line":2,"column":81,"nodeType":"232","messageId":"233","endLine":2,"endColumn":93},{"ruleId":"230","severity":1,"message":"272","line":2,"column":107,"nodeType":"232","messageId":"233","endLine":2,"endColumn":116},{"ruleId":"230","severity":1,"message":"273","line":2,"column":128,"nodeType":"232","messageId":"233","endLine":2,"endColumn":133},{"ruleId":"230","severity":1,"message":"274","line":2,"column":135,"nodeType":"232","messageId":"233","endLine":2,"endColumn":146},{"ruleId":"230","severity":1,"message":"275","line":2,"column":148,"nodeType":"232","messageId":"233","endLine":2,"endColumn":157},{"ruleId":"230","severity":1,"message":"236","line":3,"column":10,"nodeType":"232","messageId":"233","endLine":3,"endColumn":16},{"ruleId":"230","severity":1,"message":"237","line":5,"column":27,"nodeType":"232","messageId":"233","endLine":5,"endColumn":33},{"ruleId":"230","severity":1,"message":"238","line":5,"column":35,"nodeType":"232","messageId":"233","endLine":5,"endColumn":40},{"ruleId":"230","severity":1,"message":"239","line":5,"column":42,"nodeType":"232","messageId":"233","endLine":5,"endColumn":46},{"ruleId":"230","severity":1,"message":"240","line":5,"column":49,"nodeType":"232","messageId":"233","endLine":5,"endColumn":55},{"ruleId":"230","severity":1,"message":"241","line":5,"column":57,"nodeType":"232","messageId":"233","endLine":5,"endColumn":65},{"ruleId":"230","severity":1,"message":"261","line":146,"column":17,"nodeType":"232","messageId":"233","endLine":146,"endColumn":19},{"ruleId":"230","severity":1,"message":"231","line":2,"column":9,"nodeType":"232","messageId":"233","endLine":2,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":2,"column":21,"nodeType":"232","messageId":"233","endLine":2,"endColumn":35},{"ruleId":"230","severity":1,"message":"235","line":2,"column":81,"nodeType":"232","messageId":"233","endLine":2,"endColumn":93},{"ruleId":"230","severity":1,"message":"272","line":2,"column":107,"nodeType":"232","messageId":"233","endLine":2,"endColumn":116},{"ruleId":"230","severity":1,"message":"236","line":3,"column":10,"nodeType":"232","messageId":"233","endLine":3,"endColumn":16},{"ruleId":"230","severity":1,"message":"237","line":5,"column":27,"nodeType":"232","messageId":"233","endLine":5,"endColumn":33},{"ruleId":"230","severity":1,"message":"238","line":5,"column":35,"nodeType":"232","messageId":"233","endLine":5,"endColumn":40},{"ruleId":"230","severity":1,"message":"239","line":5,"column":42,"nodeType":"232","messageId":"233","endLine":5,"endColumn":46},{"ruleId":"230","severity":1,"message":"240","line":5,"column":49,"nodeType":"232","messageId":"233","endLine":5,"endColumn":55},{"ruleId":"230","severity":1,"message":"241","line":5,"column":57,"nodeType":"232","messageId":"233","endLine":5,"endColumn":65},{"ruleId":"230","severity":1,"message":"276","line":9,"column":8,"nodeType":"232","messageId":"233","endLine":9,"endColumn":18},{"ruleId":"254","severity":1,"message":"257","line":61,"column":30,"nodeType":"256","messageId":"249","endLine":61,"endColumn":32},{"ruleId":"254","severity":1,"message":"257","line":113,"column":28,"nodeType":"256","messageId":"249","endLine":113,"endColumn":30},{"ruleId":"230","severity":1,"message":"261","line":192,"column":17,"nodeType":"232","messageId":"233","endLine":192,"endColumn":19},{"ruleId":"230","severity":1,"message":"277","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":13},{"ruleId":"230","severity":1,"message":"278","line":2,"column":15,"nodeType":"232","messageId":"233","endLine":2,"endColumn":21},{"ruleId":"230","severity":1,"message":"279","line":2,"column":23,"nodeType":"232","messageId":"233","endLine":2,"endColumn":34},{"ruleId":"230","severity":1,"message":"280","line":2,"column":36,"nodeType":"232","messageId":"233","endLine":2,"endColumn":49},{"ruleId":"230","severity":1,"message":"281","line":2,"column":51,"nodeType":"232","messageId":"233","endLine":2,"endColumn":59},{"ruleId":"230","severity":1,"message":"282","line":2,"column":61,"nodeType":"232","messageId":"233","endLine":2,"endColumn":68},{"ruleId":"230","severity":1,"message":"283","line":2,"column":70,"nodeType":"232","messageId":"233","endLine":2,"endColumn":79},{"ruleId":"230","severity":1,"message":"273","line":2,"column":89,"nodeType":"232","messageId":"233","endLine":2,"endColumn":94},{"ruleId":"230","severity":1,"message":"275","line":2,"column":96,"nodeType":"232","messageId":"233","endLine":2,"endColumn":105},{"ruleId":"230","severity":1,"message":"274","line":2,"column":107,"nodeType":"232","messageId":"233","endLine":2,"endColumn":118},{"ruleId":"230","severity":1,"message":"268","line":2,"column":120,"nodeType":"232","messageId":"233","endLine":2,"endColumn":124},{"ruleId":"230","severity":1,"message":"269","line":2,"column":126,"nodeType":"232","messageId":"233","endLine":2,"endColumn":135},{"ruleId":"230","severity":1,"message":"270","line":2,"column":137,"nodeType":"232","messageId":"233","endLine":2,"endColumn":142},{"ruleId":"230","severity":1,"message":"271","line":2,"column":144,"nodeType":"232","messageId":"233","endLine":2,"endColumn":149},{"ruleId":"230","severity":1,"message":"284","line":3,"column":10,"nodeType":"232","messageId":"233","endLine":3,"endColumn":17},{"ruleId":"230","severity":1,"message":"241","line":3,"column":19,"nodeType":"232","messageId":"233","endLine":3,"endColumn":27},{"ruleId":"230","severity":1,"message":"279","line":2,"column":23,"nodeType":"232","messageId":"233","endLine":2,"endColumn":34},{"ruleId":"230","severity":1,"message":"285","line":2,"column":81,"nodeType":"232","messageId":"233","endLine":2,"endColumn":87},{"ruleId":"230","severity":1,"message":"273","line":2,"column":89,"nodeType":"232","messageId":"233","endLine":2,"endColumn":94},{"ruleId":"230","severity":1,"message":"275","line":2,"column":96,"nodeType":"232","messageId":"233","endLine":2,"endColumn":105},{"ruleId":"230","severity":1,"message":"274","line":2,"column":107,"nodeType":"232","messageId":"233","endLine":2,"endColumn":118},{"ruleId":"230","severity":1,"message":"268","line":2,"column":120,"nodeType":"232","messageId":"233","endLine":2,"endColumn":124},{"ruleId":"230","severity":1,"message":"269","line":2,"column":126,"nodeType":"232","messageId":"233","endLine":2,"endColumn":135},{"ruleId":"230","severity":1,"message":"270","line":2,"column":137,"nodeType":"232","messageId":"233","endLine":2,"endColumn":142},{"ruleId":"230","severity":1,"message":"271","line":2,"column":144,"nodeType":"232","messageId":"233","endLine":2,"endColumn":149},{"ruleId":"230","severity":1,"message":"279","line":2,"column":23,"nodeType":"232","messageId":"233","endLine":2,"endColumn":34},{"ruleId":"230","severity":1,"message":"285","line":2,"column":81,"nodeType":"232","messageId":"233","endLine":2,"endColumn":87},{"ruleId":"230","severity":1,"message":"273","line":2,"column":89,"nodeType":"232","messageId":"233","endLine":2,"endColumn":94},{"ruleId":"230","severity":1,"message":"275","line":2,"column":96,"nodeType":"232","messageId":"233","endLine":2,"endColumn":105},{"ruleId":"230","severity":1,"message":"274","line":2,"column":107,"nodeType":"232","messageId":"233","endLine":2,"endColumn":118},{"ruleId":"230","severity":1,"message":"268","line":2,"column":120,"nodeType":"232","messageId":"233","endLine":2,"endColumn":124},{"ruleId":"230","severity":1,"message":"269","line":2,"column":126,"nodeType":"232","messageId":"233","endLine":2,"endColumn":135},{"ruleId":"230","severity":1,"message":"270","line":2,"column":137,"nodeType":"232","messageId":"233","endLine":2,"endColumn":142},{"ruleId":"230","severity":1,"message":"271","line":2,"column":144,"nodeType":"232","messageId":"233","endLine":2,"endColumn":149},"no-unused-vars","'Breadcrumb' is defined but never used.","Identifier","unusedVar","'BreadcrumbItem' is defined but never used.","'FormFeedback' is defined but never used.","'render' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'Switch' is defined but never used.","'Redirect' is defined but never used.","no-native-reassign",["286"],"no-negated-in-lhs",["287"],"no-dupe-keys","Duplicate key 'type'.","ObjectExpression","unexpected","no-redeclare","'i' is already defined.","redeclared","'n' is already defined.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","Expected '===' and instead saw '=='.","'Component' is defined but never used.",["286"],["287"],"'id' is assigned a value but never used.","'jid' is assigned a value but never used.",["286"],["287"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'CardTitle' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'HeaderUser' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'NavbarBrand' is defined but never used.","'NavbarToggler' is defined but never used.","'Collapse' is defined but never used.","'NavItem' is defined but never used.","'Jumbotron' is defined but never used.","'NavLink' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]