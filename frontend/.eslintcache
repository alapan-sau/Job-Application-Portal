[{"/Users/alapan/Documents/ssad/jap/frontend/src/reportWebVitals.js":"1","/Users/alapan/Documents/ssad/jap/frontend/src/components/Signup.jsx":"2","/Users/alapan/Documents/ssad/jap/frontend/src/components/CreateJob.jsx":"3","/Users/alapan/Documents/ssad/jap/frontend/src/App.js":"4","/Users/alapan/Documents/ssad/jap/frontend/src/components/UpdateRecruiter.jsx":"5","/Users/alapan/Documents/ssad/jap/frontend/src/components/DashboardRecruiter.jsx":"6","/Users/alapan/Documents/ssad/jap/frontend/src/components/Login.jsx":"7","/Users/alapan/Documents/ssad/jap/frontend/src/index.js":"8","/Users/alapan/Documents/ssad/jap/frontend/src/components/DashboardUser.jsx":"9","/Users/alapan/Documents/ssad/jap/frontend/src/components/UpdateUser.jsx":"10","/Users/alapan/Documents/ssad/jap/frontend/src/components/Logout.jsx":"11"},{"size":362,"mtime":1610721768994,"results":"12","hashOfConfig":"13"},{"size":23413,"mtime":1611664234190,"results":"14","hashOfConfig":"13"},{"size":16385,"mtime":1611658474986,"results":"15","hashOfConfig":"13"},{"size":297,"mtime":1610731233322,"results":"16","hashOfConfig":"13"},{"size":10465,"mtime":1611643463399,"results":"17","hashOfConfig":"13"},{"size":7859,"mtime":1611641008397,"results":"18","hashOfConfig":"13"},{"size":6240,"mtime":1611664246455,"results":"19","hashOfConfig":"13"},{"size":547,"mtime":1610768308116,"results":"20","hashOfConfig":"13"},{"size":12173,"mtime":1611662232457,"results":"21","hashOfConfig":"13"},{"size":17244,"mtime":1611643465882,"results":"22","hashOfConfig":"13"},{"size":1422,"mtime":1611665297571,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jb9lyc",{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/alapan/Documents/ssad/jap/frontend/src/reportWebVitals.js",[],"/Users/alapan/Documents/ssad/jap/frontend/src/components/Signup.jsx",["50","51","52","53","54","55"],"/Users/alapan/Documents/ssad/jap/frontend/src/components/CreateJob.jsx",["56","57","58","59","60","61","62","63","64","65","66"],"import React , {Component}from 'react';\nimport {Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback} from 'reactstrap';\nimport { render } from '@testing-library/react';\n\nimport { BrowserRouter as Router, Route, Link , Switch, Redirect} from \"react-router-dom\";\nimport axios from 'axios';\n\nimport HeaderRecruiter from './HeaderRecruiter'\n\nclass CreateJob extends Component{\n    constructor(props){\n        super(props);\n\t\tthis.state = {\n\t\t\ttitle: '',\n            type: '',\n            deadline:'',\n            skill:[''],\n            type:'',\n            salary:'',\n            maxAppli:'',\n            maxPos:'',\n            remAppli:'',\n            remPos:'',\n            duration:'',\n            touched:{\n                title: false,\n                type: false,\n                deadline:false,\n                skill:[false],\n                type:false,\n                salary:false,\n                maxAppli:false,\n                maxPos:false,\n                duration:false,\n            }\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.removeSkill = this.removeSkill.bind(this);\n        this.addSkill = this.addSkill.bind(this);\n        this.renderSkill = this.renderSkill.bind(this);\n        this.validate = this. validate.bind(this);\n        this.validateSkill = this.validateSkill.bind(this);\n        this.validateSubmit = this.validateSubmit.bind(this);\n        this.addSkill = this.addSkill.bind(this);\n        this.removeSkill = this.removeSkill.bind(this);\n        this.renderSkill = this.renderSkill.bind(this);\n        this.handleBlurSkill = this.handleBlurSkill.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n\n    }\n\n    validateSubmit(){\n        if( this.state.title.length===0){\n            alert(\"Title is Required\");\n            return false;\n        }\n        if(this.state.type===''){\n            alert(\"Select a Type\");\n            return false;\n        }\n        if(((this.state.maxAppli.length===0) || (Number(this.state.maxAppli)<=0))){\n            alert(\"Required Positive Integer\");\n            return false;\n        }\n        if(((this.state.maxPos.length===0) || (Number(this.state.maxPos)<=0))){\n            alert(\"Required Positive Integer\");\n            return false;\n        }\n        if((this.state.duration==='' || Number(this.state.duration)<=0 || Number(this.state.duration)>7)){\n            alert(\"Duration must lie between 1 and 7 months\");\n            return false;\n        }\n        if(this.state.salary===''){\n            alert(\"Enter Salary details\");\n            return false;\n        }\n\n        if((this.state.deadline=== '' || (new Date(this.state.deadline)  < new Date()) ) ){\n            console.log(Date());\n            alert(\"A Deadline needs to be set in future\");\n            return false;\n        }\n        var i, n = this.state.skill.length;\n        for(i=0;i<n;i++){\n            if((this.state['skill'][i] === '')){\n                alert(\"Skill is compulsory. Please remove the skill if not required\")\n                return false;\n            }\n        }\n        return true;\n    }\n\n    validate(){\n        let errors= {\n            title:'',\n            type:'',\n            maxAppli:'',\n            maxPos: '',\n            deadline: '',\n            duration:'',\n            salary:''\n        }\n        if(this.state.touched.title && this.state.title.length===0){\n            errors.title = \"Title is Required\";\n        }\n        if(this.state.touched.type && this.state.type===''){\n            errors.type = \"Select a Type\"\n        }\n        if(this.state.touched.maxAppli && ((this.state.maxAppli.length===0) || (Number(this.state.maxAppli)<=0))){\n            errors.maxAppli = \"Required Positive Integer\";\n        }\n        if(this.state.touched.maxPos && ((this.state.maxPos.length===0) || (Number(this.state.maxPos)<=0))){\n            errors.maxPos = \"Required Positive Integer\";\n        }\n        if(this.state.touched.deadline && (this.state.deadline=== '' || (new Date(this.state.deadline)  < new Date()) ) ){\n            console.log(Date());\n            errors.deadline = \"A Deadline needs to be set in future\";\n        }\n        if(this.state.touched.duration && (this.state.duration==='' ||Number(this.state.duration)<=0 || Number(this.state.duration) > 7 )){\n            errors.duration = \"Duration must lie between 1 and 7 months\";\n        }\n        if(this.state.touched.salary && (this.state.salary==='' || Number(this.state.salary)<=0 )){\n            errors.salary = \"Enter Salary details properly\";\n        }\n        return errors;\n    }\n\n    validateSkill(skill){\n        let errors ={}\n        errors.skill=[];\n        var i, n = skill.length;\n        for(i=0;i<n;i++){\n            errors.skill.push('');\n            if(this.state.touched['skill'][i] && (this.state['skill'][i] === '')){\n                errors['skill'][i] = \"Skill is compulsory. Please remove the skill if not required\"\n            }\n        }\n        return errors;\n    }\n\n\n    handleBlurSkill = (idx)=>{\n        let touched = this.state.touched;\n        touched.skill[idx] = true;\n        this.setState({\n            touched: touched\n        });\n    }\n\n\n    handleBlur = (field)=> {\n        this.setState({\n            touched:{...this.state.touched,[field]:true}\n        });\n    }\n\n\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        // console.log(name , value);\n        let tok = name.split('-');\n        if(tok[0]==='skill'){\n            let sk = this.state.skill;\n            let pos = Number(tok[1]);\n            sk[pos] = value;\n            this.setState({skill:sk});\n        }\n        else{\n            this.setState({\n            [name]: value\n            });\n        }\n    }\n\n    addSkill(){\n        let sk = this.state.skill;\n        sk.push('');\n        let touched = this.state.touched;\n        touched.skill.push(false);\n        this.setState({skill : sk, touched: touched});\n    }\n\n    removeSkill(idx){\n        let sk = this.state.skill;\n        sk.splice(idx,1);\n        let touched = this.state.touched;\n        touched.skill.splice(idx,1);\n        this.setState({skill : sk, touched: touched});\n    }\n\n    renderSkill(){\n        let sk = this.state.skill;\n        let errors = this.validateSkill(sk);\n        let sks = sk.map((val,idx)=>{\n            let skIdx = `skill-${idx}`;\n            return(\n                <FormGroup row>\n                <Label htmlFor=\"type\" md={2}></Label>\n                <Col md={3}>\n                    <Input type=\"select\" name={skIdx}\n                    value={this.state.skill[idx]}\n                    onChange={this.handleInputChange}\n                    valid={errors.skill[idx] === ''}\n                    invalid={errors.skill[idx] !== ''}\n                    onBlur={()=>{this.handleBlurSkill(idx)}}\n                    >\n                        <option value=''> Select Type</option>\n                        <option>C++</option>\n                        <option>Python</option>\n                    </Input>\n                    <FormFeedback>{errors.skill[idx]}</FormFeedback>\n                </Col>\n                <Col md={1}>\n                <Button\n                onClick={(idx)=>{this.removeSkill(idx);}}>\n                    -\n                </Button>\n                </Col>\n                </FormGroup>\n            )\n        });\n        return(\n            <div>\n                <FormGroup row>\n                <Label md={2}>Skills</Label>\n                </FormGroup>\n                {sks}\n                <FormGroup row>\n                <Label md={2}></Label>\n                <Col md={10}>\n                <Button color=\"primary\"\n                onClick={this.addSkill}>\n                    +\n                </Button>\n                </Col>\n                </FormGroup>\n            </div>\n\n        );\n    }\n\n\n    handleSubmit(event) {\n        if(!this.validateSubmit()){\n            event.preventDefault();\n            return;\n        }\n        // alert('Current State is: ' + JSON.stringify(this.state));\n        event.preventDefault();\n        axios({\n            method: \"POST\",\n            url: \"http://localhost:3000/jobs\",\n            data: this.state,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            alert(\"Job Created\");\n            console.log( response);\n        }).catch(error => {\n            alert(JSON.stringify(error.response));\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n    render(){\n\n        let errors = this.validate();\n        let skills = this.renderSkill();\n\n        return (\n            <div className=\"container\">\n                <HeaderRecruiter/>\n                <div className=\"row row-content\">\n                    <div className=\"col-12 col-md-9\">\n                        <Form onSubmit={this.handleSubmit}>\n                            <FormGroup row>\n                                <Label htmlFor=\"title\" md={2}>Title of Job</Label>\n                                <Col md={10}>\n                                    <Input type=\"text\" id=\"title\" name=\"title\"\n                                        placeholder=\"Name of the Job Profile\"\n                                        value={this.state.title}\n                                        onChange={this.handleInputChange}\n                                        valid={errors.title === ''}\n                                        invalid={errors.title !== ''}\n                                        onBlur={()=>{this.handleBlur('title')}}\n                                        />\n                                        <FormFeedback> {errors.title} </FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"type\" md={2}>Type</Label>\n                                <Col md={10}>\n                                <Input type=\"select\" id=\"type\" name=\"type\"\n                                    placeholder=\"Type of your Job\"\n                                    value={this.state.type}\n                                    onChange={this.handleInputChange}\n                                    valid={errors.type === ''}\n                                    invalid={errors.type !== ''}\n                                    onBlur={()=>{this.handleBlur('type')}}\n                                    >\n                                        <option value=''>Select Type</option>\n                                        <option>Full Time</option>\n                                        <option>Part Time</option>\n                                        <option>Work From Home</option>\n                                </Input>\n\n                                <FormFeedback>{errors.type}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"salary\" md={2}>Salary</Label>\n                                <Col md={10}>\n                                <Input type=\"Number\" id=\"salary\" name=\"salary\"\n                                    placeholder=\"Salary\"\n                                    value={this.state.salary}\n                                    valid={errors.salary === ''}\n                                    invalid={errors.salary !== ''}\n                                    onBlur={()=>{this.handleBlur('salary')}}\n                                    onChange={this.handleInputChange} />\n                                <FormFeedback>{errors.salary}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"maxPos\" md={2}>Maximum Positions</Label>\n                                <Col md={10}>\n                                <Input type=\"Number\" id=\"maxPos\" name=\"maxPos\"\n                                    placeholder=\"Maximum Number of Positions to be filled\"\n                                    value={this.state.maxPos}\n                                    valid={errors.maxPos === ''}\n                                    invalid={errors.maxPos !== ''}\n                                    onBlur={()=>{this.handleBlur('maxPos')}}\n                                    onChange={this.handleInputChange} />\n                                <FormFeedback>{errors.maxPos}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"maxAppli\" md={2}>Maximum Applications</Label>\n                                <Col md={10}>\n                                <Input type=\"Number\" id=\"maxAppli\" name=\"maxAppli\"\n                                    placeholder=\"Maximum Number of Applications\"\n                                    value={this.state.maxAppli}\n                                    valid={errors.maxAppli === ''}\n                                    invalid={errors.maxAppli !== ''}\n                                    onBlur={()=>{this.handleBlur('maxAppli')}}\n                                    onChange={this.handleInputChange} />\n                                <FormFeedback>{errors.maxAppli}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"duration\" md={2}>Duration</Label>\n                                <Col md={10}>\n                                <Input type=\"select\" id=\"duration\" name=\"duration\"\n                                    placeholder=\"Duration in Months\"\n                                    value={this.state.duration}\n                                    valid={errors.duration === ''}\n                                    invalid={errors.duration !== ''}\n                                    onBlur={()=>{this.handleBlur('duration')}}\n                                    onChange={this.handleInputChange} >\n                                    <option value=''>Select</option>\n                                    <option>1</option>\n                                    <option>2</option>\n                                    <option>3</option>\n                                    <option>4</option>\n                                    <option>5</option>\n                                    <option>6</option>\n                                    <option>7</option>\n                                    </Input>\n                                <FormFeedback>{errors.duration}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"deadline\" md={2}>Deadline</Label>\n                                <Col md={10}>\n                                <Input type=\"datetime-local\" id=\"deadline\" name=\"deadline\"\n                                    placeholder=\"Deadline to Fill\"\n                                    value={this.state.deadline}\n                                    valid={errors.deadline === ''}\n                                    invalid={errors.deadline !== ''}\n                                    onBlur={()=>{this.handleBlur('deadline')}}\n                                    onChange={this.handleInputChange} />\n                                <FormFeedback>{errors.deadline}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            {skills}\n                            <FormGroup row>\n                                <Col md={{size: 3, offset: 3}}>\n                                    <Button color=\"primary\" type=\"submit\">\n                                        Create Job\n                                    </Button>\n                                </Col>\n                            </FormGroup>\n                        </Form>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default CreateJob;","/Users/alapan/Documents/ssad/jap/frontend/src/App.js",["67"],"/Users/alapan/Documents/ssad/jap/frontend/src/components/UpdateRecruiter.jsx",["68","69","70","71","72","73","74","75"],"import React , {Component}from 'react';\nimport {Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback} from 'reactstrap';\nimport {Link} from 'react-router-dom';\nimport { render } from '@testing-library/react';\nimport axios from 'axios';\n\nimport HeaderRecruiter from './HeaderRecruiter'\n\nclass UpdateUser extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            firstName:'',\n            lastName:'',\n            email: '',\n            bio:'',\n            telnum:'',\n            touched:{\n                firstName:false,\n                lastName:false,\n                email: false,\n                bio:false,\n                telnum:false,\n            }\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.setUpData= this.setUpData.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.validate = this.validate.bind(this);\n        this.validateSubmit = this.validateSubmit.bind(this);\n    }\n\n    setUpData(){\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/recruiters/me\",\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            console.log(response.data);\n            // alert(JSON.stringify(response.data));\n            this.setState({\n                firstName: response.data.firstName,\n                lastName: response.data.lastName,\n                email: response.data.email,\n                telnum: response.data.telnum,\n                bio:response.data.bio\n            })\n        }).catch(error => {\n            alert(\"Oops, Something went wrong!!\");\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n    componentDidMount(){\n        this.setUpData();\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        console.log(name , value);\n\n        this.setState({\n        [name]: value\n        });\n    }\n\n    validate(firstName,lastName,email,telnum,bio) {\n        console.log('called');\n        const errors={\n            firstName:'',\n            lastName:'',\n            email: '',\n            telnum:'',\n            bio:''\n        };\n        if(this.state.touched.firstName && (firstName.length === 0)){\n            errors.firstName='First Name is required';\n        }\n        if(this.state.touched.lastName && (lastName.length===0)){\n            errors.lastName='Last Name is required';\n        }\n        const reg = /^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+.+(?:.[a-zA-Z0-9-]))$/;\n        if(this.state.touched.email && !reg.test(email)){\n            errors.email='Invalid Email';\n        }\n        const phonereg = /^\\d{10}$/;\n        if(this.state.touched.telnum && !phonereg.test(telnum)){\n            errors.telnum='Invalid Phone Number';\n        }\n        let allWords = bio.split(' ');\n        if(this.state.touched.bio && (allWords.length > 250)){\n            errors.bio='Max Limit 250 words';\n        }\n\n        return errors;\n    }\n\n    validateSubmit(firstName,lastName,email,telnum,bio) {\n\n        if((firstName.length === 0)){\n            alert('First Name is required');\n            return false;\n        }\n        if(this.state.touched.lastName && (lastName.length===0)){\n            alert('Last Name is required');\n            return false;\n        }\n        const reg = /^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+.+(?:.[a-zA-Z0-9-]))$/;\n        if(!reg.test(email)){\n            alert('Invalid Email');\n            return false;\n        }\n        const phonereg = /^\\d{10}$/;\n        if(this.state.touched.telnum && (!phonereg.test(telnum) && telnum!=='')){\n            alert('Invalid Phone Number');\n            return false;\n        }\n        let allWords = bio.split(' ');\n        if(this.state.touched.bio && (allWords.length > 250)){\n            alert('Max Limit 250 words');\n            return false;\n        }\n        return true;\n    }\n\n    handleSubmit(event) {\n        console.log('here');\n        if(!this.validateSubmit(this.state.firstName, this.state.lastName, this.state.email, this.state.telnum, this.state.bio)){\n            event.preventDefault();\n            return;\n        }\n        console.log('yes');\n        axios({\n            method: \"PUT\",\n            url: \"http://localhost:3000/recruiters/me\",\n            data: this.state,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            alert(\"Done\");\n            console.log(response)\n        }).catch(error => {\n            alert(\"Not Done!!\");\n            if (error) {\n                console.log(error.response);\n            }\n        });\n        event.preventDefault();\n    }\n\n\n    handleBlur = (field)=> {\n        this.setState({\n            touched:{...this.state.touched,[field]:true}\n        });\n    }\n\n    render(){\n\n        let errors = this.validate(this.state.firstName, this.state.lastName, this.state.email, this.state.telnum, this.state.bio)\n        // console.log(errors);\n        // console.log(this.state)\n        return(\n            <div className=\"container\">\n                <HeaderRecruiter/>\n                <div className=\"row row-content\">\n                    <div className=\"col-12 col-md-9\">\n                        <Form>\n                            <FormGroup row>\n                                <Label htmlFor=\"firstName\" md={2}>First Name</Label>\n                                <Col md={10}>\n                                    <Input type=\"text\" id=\"firstName\" name=\"firstName\"\n                                        placeholder=\"First Name\"\n                                        value={this.state.firstName}\n                                        valid={errors.firstName===''}\n                                        invalid={errors.firstName!==''}\n                                        onChange={this.handleInputChange}\n                                        onBlur={()=>{this.handleBlur('firstName')}} />\n                                        <FormFeedback>{errors.firstName}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"lastName\" md={2}>Last Name</Label>\n                                <Col md={10}>\n                                    <Input type=\"text\" id=\"lastName\" name=\"lastName\"\n                                        placeholder=\"Last Name\"\n                                        value={this.state.lastName}\n                                        onChange={this.handleInputChange}\n                                        valid={errors.lastName===''}\n                                        invalid={errors.lastName!==''}\n                                        onChange={this.handleInputChange}\n                                        onBlur={()=>{this.handleBlur('lastName')}} />\n                                        <FormFeedback>{errors.lastName}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\n                                <Col md={10}>\n                                    <Input type=\"email\" id=\"email\" name=\"email\"\n                                        placeholder=\"Email\"\n                                        value={this.state.email}\n                                        onChange={this.handleInputChange}\n                                        valid={errors.email===''}\n                                        invalid={errors.email!==''}\n                                        onChange={this.handleInputChange}\n                                        onBlur={()=>{this.handleBlur('email')}} />\n                                        <FormFeedback>{errors.email}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                            <Label htmlFor=\"telnum\" md={2}>Contact Number</Label>\n                                <Col md={10}>\n                                    <Input type=\"tel\" id=\"telnum\" name=\"telnum\" placeholder=\"Contact Number\"\n                                    onChange={this.handleInputChange}\n                                    value={this.state.telnum}\n                                    valid={errors.telnum===''}\n                                    invalid={errors.telnum!==''}\n                                    onChange={this.handleInputChange}\n                                    onBlur={()=>{this.handleBlur('telnum')}} />\n                                    <FormFeedback>{errors.telnum}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"bio\" md={2}>Your Bio</Label>\n                                <Col md={10}>\n                                    <Input type=\"textarea\" id=\"bio\" name=\"bio\" rows=\"6\"\n                                    value={this.state.bio}\n                                    onChange={this.handleInputChange}\n                                    valid={errors.bio===''}\n                                    invalid={errors.bio!==''}\n                                    onChange={this.handleInputChange}\n                                    onBlur={()=>{this.handleBlur('bio')}} />\n                                    <FormFeedback>{errors.bio}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Col md={{size: 10, offset: 2}}>\n                                    <Button type=\"submit\" color=\"primary\" onClick={this.handleSubmit}>\n                                        Edit\n                                    </Button>\n                                </Col>\n                            </FormGroup>\n                        </Form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default UpdateUser;",["76","77"],"/Users/alapan/Documents/ssad/jap/frontend/src/components/DashboardRecruiter.jsx",["78","79","80","81","82","83","84","85","86"],"import React , {Component}from 'react';\nimport {Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback, Card, Row , CardTitle, CardText, Modal, ModalHeader, ModalBody} from 'reactstrap';\nimport { render } from '@testing-library/react';\n\nimport { BrowserRouter as Router, Route, Link , Switch, Redirect} from \"react-router-dom\";\nimport axios from 'axios';\n\nimport HeaderRecruiter from './HeaderRecruiter'\n\nclass DashboardRecruiter extends Component{\n    constructor(props){\n        super(props);\n\t\tthis.state = {\n            joblist:[],\n            isModalOpen:false,\n            maxAppli:'',\n            maxPos:'',\n            deadline:'',\n            selectedId:''\n        };\n        this.getData = this.getData.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.getJobData = this.getJobData.bind(this);\n        this.submitEdit = this.submitEdit.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n\n    validateSubmit(){\n        if(((this.state.maxAppli.length===0) || (Number(this.state.maxAppli)<=0))){\n            alert(\"Required Positive Integer for Maximum Applications\");\n            return false;\n        }\n        if(((this.state.maxPos.length===0) || (Number(this.state.maxPos)<=0))){\n            alert(\"Required Positive Integer for maximum positions\");\n            return false;\n        }\n        if((this.state.deadline=== '' || (new Date(this.state.deadline)  < new Date()) ) ){\n            alert(\"A Deadline needs to be set in future\");\n            return false;\n        }\n        return true;\n    }\n\n    getData(){\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/jobs/myjobs\",\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            // console.log(response.data);\n            this.setState({\n                joblist:response.data,\n            })\n        }).catch(error => {\n            // alert(JSON.stringify(error.response));\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n    getJobData(jid){\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/jobs/\"+jid,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            // alert('getting edit data');\n            console.log(response.data);\n            this.setState({\n                isModalOpen: true,\n                maxAppli: response.data.maxAppli,\n                maxPos: response.data.maxPos,\n                deadline: response.data.deadline,\n                selectedId:jid\n            });\n        }).catch(error => {\n            alert(JSON.stringify(error.response));\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n    handleDelete(event){\n        let jid = event.target.id;\n        axios({\n            method: \"DELETE\",\n            url: \"http://localhost:3000/jobs/\"+jid,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            console.log(response.data);\n            this.getData();\n        }).catch(error => {\n            alert(JSON.stringify(error.response));\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n    toggleModal(event)\n    {\n        if(this.state.isModalOpen === false)\n        {\n            var jid = event.target.id;\n            this.getJobData(jid)\n        }\n        else\n        {\n            this.getData();\n            this.setState({\n                isModalOpen: false,\n                maxAppli: '',\n                maxPos:'',\n                deadline:'',\n                selectedId:'',\n            });\n        }\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        // console.log(name , value);\n        this.setState({\n        [name]: value\n        });\n    }\n\n    submitEdit(event){\n        if(!this.validateSubmit()){\n            event.preventDefault();\n            return;\n        }\n        let obj={};\n        obj.maxAppli = this.state.maxAppli;\n        obj.maxPos = this.state.maxPos;\n        obj.deadline = this.state.deadline;\n        axios({\n            method: \"PUT\",\n            url: \"http://localhost:3000/jobs/\"+this.state.selectedId,\n            data:obj,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then((response) => {\n            console.log(response.data);\n            this.getData();\n            this.setState({isModalOpen:false});\n        }).catch(error => {\n            // alert(JSON.stringify(error.response));\n            if (error) {\n                console.log(error.response);\n            }\n        });\n    }\n\n\n    componentDidMount(){\n        this.getData();\n    }\n\n    render(){\n\n        let allJob = this.state.joblist;\n        let jobs = allJob.map((job)=>{\n\n            if(job.remPos==0) return null;\n            return(\n                <Row>\n                <Col>\n                  <Card body>\n                    <CardTitle tag=\"h5\">{job.title}</CardTitle>\n                    <CardText>Id : {job._id}</CardText>\n                    <CardText>Skills : {job.skill}</CardText>\n                    <CardText>Deadline : {job.deadline}</CardText>\n                    <CardText>Remaining Applications : {job.remAppli}</CardText>\n                    <CardText>Remaining Positions : {job.remPos}</CardText>\n                    <CardText>Type of Job : {job.type}</CardText>\n                    <CardText>Salary : {job.salary}</CardText>\n                    <CardText>Duration : {job.duration}</CardText>\n                    <CardText>Rating : {job.rating}</CardText>\n                    <Button id={job._id} onClick = {this.toggleModal}>Edit Job</Button>\n                    <Button id={job._id} onClick = {this.handleDelete}>Delete Job</Button>\n                    <Link to={`/recruiters/${job._id}`}>\n                    <Button id={job._id}>\n                        View Applications\n                    </Button>\n                    </Link>\n                    </Card>\n                </Col>\n                </Row>\n            )\n        });\n\n        return(\n            <div className=\"container\">\n                <HeaderRecruiter/>\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\n                    <ModalBody>\n                        <Form>\n                            <FormGroup>\n                                <Label htmlFor=\"maxAppli\">Maximum Applications</Label>\n                                <Input type=\"Number\" id=\"maxAppli\" name=\"maxAppli\" value={this.state.maxAppli} onChange={this.handleInputChange}/>\n                                <Label htmlFor=\"maxPos\">Maximum Positions</Label>\n                                <Input type=\"Number\" id=\"maxPos\" name=\"maxPos\" value={this.state.maxPos} onChange={this.handleInputChange}/>\n                                <Label htmlFor=\"deadline\">Deadline</Label>\n                                <Input type=\"datetime-local\" id=\"deadline\" name=\"deadline\" value={this.state.deadline} onChange={this.handleInputChange}/>\n                            </FormGroup>\n                            <Button color=\"primary\" onClick={this.submitEdit}>Submit Application</Button>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n                {jobs}\n            </div>\n        );\n    }\n}\n\nexport default DashboardRecruiter;\n\n\n","/Users/alapan/Documents/ssad/jap/frontend/src/components/Login.jsx",["87","88","89","90","91","92","93","94"],"/Users/alapan/Documents/ssad/jap/frontend/src/index.js",[],"/Users/alapan/Documents/ssad/jap/frontend/src/components/DashboardUser.jsx",["95","96","97","98","99","100","101","102","103","104","105"],"/Users/alapan/Documents/ssad/jap/frontend/src/components/UpdateUser.jsx",["106","107","108","109","110","111","112"],"/Users/alapan/Documents/ssad/jap/frontend/src/components/Logout.jsx",["113","114","115","116","117","118","119","120","121","122","123","124","125","126","127"],{"ruleId":"128","severity":1,"message":"129","line":2,"column":9,"nodeType":"130","messageId":"131","endLine":2,"endColumn":19},{"ruleId":"128","severity":1,"message":"132","line":2,"column":21,"nodeType":"130","messageId":"131","endLine":2,"endColumn":35},{"ruleId":"128","severity":1,"message":"133","line":2,"column":95,"nodeType":"130","messageId":"131","endLine":2,"endColumn":100},{"ruleId":"128","severity":1,"message":"134","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":16},{"ruleId":"135","severity":1,"message":"136","line":120,"column":13,"nodeType":"130","messageId":"137","endLine":120,"endColumn":14},{"ruleId":"135","severity":1,"message":"138","line":120,"column":15,"nodeType":"130","messageId":"137","endLine":120,"endColumn":16},{"ruleId":"128","severity":1,"message":"129","line":2,"column":9,"nodeType":"130","messageId":"131","endLine":2,"endColumn":19},{"ruleId":"128","severity":1,"message":"132","line":2,"column":21,"nodeType":"130","messageId":"131","endLine":2,"endColumn":35},{"ruleId":"128","severity":1,"message":"134","line":3,"column":10,"nodeType":"130","messageId":"131","endLine":3,"endColumn":16},{"ruleId":"128","severity":1,"message":"139","line":5,"column":27,"nodeType":"130","messageId":"131","endLine":5,"endColumn":33},{"ruleId":"128","severity":1,"message":"140","line":5,"column":35,"nodeType":"130","messageId":"131","endLine":5,"endColumn":40},{"ruleId":"128","severity":1,"message":"141","line":5,"column":42,"nodeType":"130","messageId":"131","endLine":5,"endColumn":46},{"ruleId":"128","severity":1,"message":"142","line":5,"column":49,"nodeType":"130","messageId":"131","endLine":5,"endColumn":55},{"ruleId":"128","severity":1,"message":"143","line":5,"column":57,"nodeType":"130","messageId":"131","endLine":5,"endColumn":65},{"ruleId":"144","severity":1,"message":"145","line":18,"column":13,"nodeType":"146","messageId":"147","endLine":18,"endColumn":17},{"ruleId":"144","severity":1,"message":"145","line":30,"column":17,"nodeType":"146","messageId":"147","endLine":30,"endColumn":21},{"ruleId":"148","severity":1,"message":"149","line":43,"column":25,"nodeType":"150","messageId":"151","endLine":43,"endColumn":39,"fix":"152"},{"ruleId":"128","severity":1,"message":"153","line":1,"column":16,"nodeType":"130","messageId":"131","endLine":1,"endColumn":25},{"ruleId":"128","severity":1,"message":"129","line":2,"column":9,"nodeType":"130","messageId":"131","endLine":2,"endColumn":19},{"ruleId":"128","severity":1,"message":"132","line":2,"column":21,"nodeType":"130","messageId":"131","endLine":2,"endColumn":35},{"ruleId":"128","severity":1,"message":"141","line":3,"column":9,"nodeType":"130","messageId":"131","endLine":3,"endColumn":13},{"ruleId":"128","severity":1,"message":"134","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":16},{"ruleId":"154","severity":1,"message":"155","line":199,"column":41,"nodeType":"156","endLine":199,"endColumn":74},{"ruleId":"154","severity":1,"message":"155","line":213,"column":41,"nodeType":"156","endLine":213,"endColumn":74},{"ruleId":"154","severity":1,"message":"155","line":226,"column":37,"nodeType":"156","endLine":226,"endColumn":70},{"ruleId":"154","severity":1,"message":"155","line":239,"column":37,"nodeType":"156","endLine":239,"endColumn":70},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"128","severity":1,"message":"129","line":2,"column":9,"nodeType":"130","messageId":"131","endLine":2,"endColumn":19},{"ruleId":"128","severity":1,"message":"132","line":2,"column":21,"nodeType":"130","messageId":"131","endLine":2,"endColumn":35},{"ruleId":"128","severity":1,"message":"161","line":2,"column":81,"nodeType":"130","messageId":"131","endLine":2,"endColumn":93},{"ruleId":"128","severity":1,"message":"134","line":3,"column":10,"nodeType":"130","messageId":"131","endLine":3,"endColumn":16},{"ruleId":"128","severity":1,"message":"139","line":5,"column":27,"nodeType":"130","messageId":"131","endLine":5,"endColumn":33},{"ruleId":"128","severity":1,"message":"140","line":5,"column":35,"nodeType":"130","messageId":"131","endLine":5,"endColumn":40},{"ruleId":"128","severity":1,"message":"142","line":5,"column":49,"nodeType":"130","messageId":"131","endLine":5,"endColumn":55},{"ruleId":"128","severity":1,"message":"143","line":5,"column":57,"nodeType":"130","messageId":"131","endLine":5,"endColumn":65},{"ruleId":"162","severity":1,"message":"163","line":178,"column":26,"nodeType":"164","messageId":"147","endLine":178,"endColumn":28},{"ruleId":"128","severity":1,"message":"129","line":2,"column":9,"nodeType":"130","messageId":"131","endLine":2,"endColumn":19},{"ruleId":"128","severity":1,"message":"132","line":2,"column":21,"nodeType":"130","messageId":"131","endLine":2,"endColumn":35},{"ruleId":"128","severity":1,"message":"161","line":2,"column":81,"nodeType":"130","messageId":"131","endLine":2,"endColumn":93},{"ruleId":"128","severity":1,"message":"134","line":3,"column":10,"nodeType":"130","messageId":"131","endLine":3,"endColumn":16},{"ruleId":"128","severity":1,"message":"139","line":5,"column":27,"nodeType":"130","messageId":"131","endLine":5,"endColumn":33},{"ruleId":"128","severity":1,"message":"140","line":5,"column":35,"nodeType":"130","messageId":"131","endLine":5,"endColumn":40},{"ruleId":"128","severity":1,"message":"142","line":5,"column":49,"nodeType":"130","messageId":"131","endLine":5,"endColumn":55},{"ruleId":"162","severity":1,"message":"163","line":93,"column":31,"nodeType":"164","messageId":"147","endLine":93,"endColumn":33},{"ruleId":"128","severity":1,"message":"129","line":2,"column":9,"nodeType":"130","messageId":"131","endLine":2,"endColumn":19},{"ruleId":"128","severity":1,"message":"132","line":2,"column":21,"nodeType":"130","messageId":"131","endLine":2,"endColumn":35},{"ruleId":"128","severity":1,"message":"161","line":2,"column":81,"nodeType":"130","messageId":"131","endLine":2,"endColumn":93},{"ruleId":"128","severity":1,"message":"134","line":3,"column":10,"nodeType":"130","messageId":"131","endLine":3,"endColumn":16},{"ruleId":"128","severity":1,"message":"139","line":5,"column":27,"nodeType":"130","messageId":"131","endLine":5,"endColumn":33},{"ruleId":"128","severity":1,"message":"140","line":5,"column":35,"nodeType":"130","messageId":"131","endLine":5,"endColumn":40},{"ruleId":"128","severity":1,"message":"141","line":5,"column":42,"nodeType":"130","messageId":"131","endLine":5,"endColumn":46},{"ruleId":"128","severity":1,"message":"142","line":5,"column":49,"nodeType":"130","messageId":"131","endLine":5,"endColumn":55},{"ruleId":"128","severity":1,"message":"143","line":5,"column":57,"nodeType":"130","messageId":"131","endLine":5,"endColumn":65},{"ruleId":"162","severity":1,"message":"163","line":153,"column":28,"nodeType":"164","messageId":"147","endLine":153,"endColumn":30},{"ruleId":"162","severity":1,"message":"165","line":238,"column":29,"nodeType":"164","messageId":"147","endLine":238,"endColumn":31},{"ruleId":"128","severity":1,"message":"129","line":2,"column":9,"nodeType":"130","messageId":"131","endLine":2,"endColumn":19},{"ruleId":"128","severity":1,"message":"132","line":2,"column":21,"nodeType":"130","messageId":"131","endLine":2,"endColumn":35},{"ruleId":"128","severity":1,"message":"141","line":3,"column":9,"nodeType":"130","messageId":"131","endLine":3,"endColumn":13},{"ruleId":"128","severity":1,"message":"134","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":16},{"ruleId":"135","severity":1,"message":"136","line":60,"column":21,"nodeType":"130","messageId":"137","endLine":60,"endColumn":22},{"ruleId":"135","severity":1,"message":"136","line":132,"column":13,"nodeType":"130","messageId":"137","endLine":132,"endColumn":14},{"ruleId":"135","severity":1,"message":"138","line":132,"column":15,"nodeType":"130","messageId":"137","endLine":132,"endColumn":16},{"ruleId":"128","severity":1,"message":"166","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":13},{"ruleId":"128","severity":1,"message":"167","line":2,"column":15,"nodeType":"130","messageId":"131","endLine":2,"endColumn":21},{"ruleId":"128","severity":1,"message":"168","line":2,"column":23,"nodeType":"130","messageId":"131","endLine":2,"endColumn":34},{"ruleId":"128","severity":1,"message":"169","line":2,"column":36,"nodeType":"130","messageId":"131","endLine":2,"endColumn":49},{"ruleId":"128","severity":1,"message":"170","line":2,"column":51,"nodeType":"130","messageId":"131","endLine":2,"endColumn":59},{"ruleId":"128","severity":1,"message":"171","line":2,"column":61,"nodeType":"130","messageId":"131","endLine":2,"endColumn":68},{"ruleId":"128","severity":1,"message":"172","line":2,"column":70,"nodeType":"130","messageId":"131","endLine":2,"endColumn":79},{"ruleId":"128","severity":1,"message":"173","line":2,"column":89,"nodeType":"130","messageId":"131","endLine":2,"endColumn":94},{"ruleId":"128","severity":1,"message":"174","line":2,"column":96,"nodeType":"130","messageId":"131","endLine":2,"endColumn":105},{"ruleId":"128","severity":1,"message":"175","line":2,"column":107,"nodeType":"130","messageId":"131","endLine":2,"endColumn":118},{"ruleId":"128","severity":1,"message":"176","line":2,"column":120,"nodeType":"130","messageId":"131","endLine":2,"endColumn":124},{"ruleId":"128","severity":1,"message":"177","line":2,"column":126,"nodeType":"130","messageId":"131","endLine":2,"endColumn":135},{"ruleId":"128","severity":1,"message":"178","line":2,"column":137,"nodeType":"130","messageId":"131","endLine":2,"endColumn":142},{"ruleId":"128","severity":1,"message":"179","line":2,"column":144,"nodeType":"130","messageId":"131","endLine":2,"endColumn":149},{"ruleId":"128","severity":1,"message":"180","line":3,"column":10,"nodeType":"130","messageId":"131","endLine":3,"endColumn":17},"no-unused-vars","'Breadcrumb' is defined but never used.","Identifier","unusedVar","'BreadcrumbItem' is defined but never used.","'Alert' is defined but never used.","'render' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","'n' is already defined.","'Router' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'Switch' is defined but never used.","'Redirect' is defined but never used.","no-dupe-keys","Duplicate key 'type'.","ObjectExpression","unexpected","no-whitespace-before-property","Unexpected whitespace before property validate.","MemberExpression","unexpectedWhitespace",{"range":"181","text":"182"},"'Component' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["183"],"no-negated-in-lhs",["184"],"'FormFeedback' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","Expected '!==' and instead saw '!='.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'NavbarBrand' is defined but never used.","'NavbarToggler' is defined but never used.","'Collapse' is defined but never used.","'NavItem' is defined but never used.","'Jumbotron' is defined but never used.","'Modal' is defined but never used.","'ModalBody' is defined but never used.","'ModalHeader' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'NavLink' is defined but never used.",[1357,1359],".","no-global-assign","no-unsafe-negation"]